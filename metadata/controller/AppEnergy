{
    "type": "Ext.app.Controller",
    "reference": {
        "name": "items",
        "type": "array"
    },
    "codeClass": null,
    "userConfig": {
        "designer|userClassName": "AppEnergy"
    },
    "name": "MyController",
    "designerId": "b0deeae5-f99f-4c94-ac2c-ea69923636d7",
    "cn": [
        {
            "type": "controlleraction",
            "reference": {
                "name": "listeners",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|controlQuery": "#tabEnergy",
                "designer|params": [
                    "component",
                    "eOpts"
                ],
                "designer|targetType": "Ext.panel.Panel",
                "fn": "onTabEnergyActivate",
                "implHandler": [
                    "//STORE",
                    "var form = Ext.getCmp('fmEnergy');",
                    "var btAddNach = Ext.getCmp('btAddNachEnergy');",
                    "//var btAddPerer = Ext.getCmp('btAddPererEnergy');",
                    "//var pnPerer = Ext.getCmp('pnPererEnergy');",
                    "var grid = Ext.getCmp('grTarifHousesEnergy');",
                    "var store = grid.getStore();",
                    "store.removeAll();",
                    "var dt = new Date();",
                    "var firstDay = Ext.Date.getFirstDateOfMonth( dt ) ;",
                    "form.getForm().reset();",
                    "form.getForm().findField('data_nach').setValue(firstDay);",
                    "btAddNach.setText(\"Начислить электроэнергию за период   \"+ Ext.Date.format(firstDay, 'F,Y'));",
                    "//btAddPerer.setText(\"Перерасчитать электроэнергию за период  \"+ Ext.Date.format(firstDay, 'F,Y'));",
                    "//pnPerer.setTitle(\"Перерасчет электроэнергию за период \"+ Ext.Date.format(firstDay, 'F,Y'));",
                    ""
                ],
                "name": "activate"
            },
            "name": "onTabEnergyActivate",
            "designerId": "f024202b-77b1-4a7e-bc34-ab6c9ac69137"
        },
        {
            "type": "controlleraction",
            "reference": {
                "name": "listeners",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|controlQuery": "#tabAppEnergomer",
                "designer|params": [
                    "component",
                    "eOpts"
                ],
                "designer|targetType": "flat.TabAppEnergomer",
                "fn": "onTabAppEnergomerActivate",
                "implHandler": [
                    "//in use",
                    "//STORE",
                    "",
                    "var stUser = Ext.data.StoreManager.get(\"StUser\");",
                    "",
                    "//LOGIN & PASSWORD",
                    "",
                    "var values =stUser.getAt(0);",
                    "var login = values.get('login');",
                    "var password = values.get('password');",
                    "var address_id = values.get('address_id');",
                    "var address = values.get('address');",
                    "var house_id = values.get('house_id');",
                    "var prixod_id = values.get('prixod_id');",
                    "",
                    "var fmEnergomer = Ext.getCmp('fmEnergomer');",
                    "",
                    "",
                    "//STORE",
                    "var StEnergomer = Ext.data.StoreManager.get(\"StEnergomer\");//QueryVodomer.getResults  <AppVodomer>",
                    "var StHEnergomer = Ext.data.StoreManager.get(\"StHEnergomer\");//QueryVodomer.getResults <AppHVodomer>",
                    "var StPEnergomer = Ext.data.StoreManager.get(\"StPEnergomer\");//QueryTeplomer.getResults <AppHTeplomer>",
                    "StPEnergomer.removeAll();",
                    "",
                    "//grAllPokVodomera.getView().refresh();",
                    "",
                    "//showAddressAppVodomer.setText(address).show();",
                    "fmEnergomer.getForm().reset();",
                    "StEnergomer.load({",
                    "    params: {",
                    "        what:'AppEnergomer',",
                    "        what_id: address_id,",
                    "        address_id: address_id,",
                    "        login:login,",
                    "        password:password",
                    "    },",
                    "    scope:this",
                    "});",
                    "",
                    "StHEnergomer.load({",
                    "    params: {",
                    "        what:'AppHEnergomer',",
                    "        what_id: address_id,",
                    "        address_id: address_id,",
                    "        login:login,",
                    "        password:password",
                    "    },",
                    "    scope:this",
                    "});",
                    ""
                ],
                "name": "activate",
                "scope": "me"
            },
            "name": "onTabAppEnergomerActivate",
            "designerId": "eac2eee5-7470-404b-acee-1bb7e076c830"
        },
        {
            "type": "controlleraction",
            "reference": {
                "name": "listeners",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|controlQuery": "#addAppEnergomer",
                "designer|params": [
                    "button",
                    "e",
                    "eOpts"
                ],
                "designer|targetType": "MyButton42",
                "fn": "onAddAppEnergomerClick",
                "implHandler": [
                    "//in use",
                    "var me=this;",
                    "/*",
                    "COMPONENT",
                    "*/",
                    "var winAddEnergomer = Ext.ClassManager.instantiateByAlias('widget.winaddenergomer');",
                    "/*",
                    "LOGIKA",
                    "*/",
                    "var dt = new Date();",
                    "",
                    "var form = winAddEnergomer.down('#fmAddEnergomer');",
                    "var check = form.down('#chkExistentEnergomer');",
                    "var jointVodomer = form.down('#jointEnergomer');",
                    "var stUser = Ext.data.StoreManager.get(\"StUser\");",
                    "var values =stUser.getAt(0);",
                    "",
                    "//LOGIKA'",
                    "values.set({'vibor':'addAppEnergomer'});",
                    "stUser.sync();",
                    "form.down('#btAddEnergomer').setText('Добавить прибор');",
                    "form.getForm().findField('pdate').setValue(Ext.Date.format(dt, 'Y-m-d'));",
                    "form.getForm().findField('sdate').setValue(Ext.Date.format(dt, 'Y-m-d'));",
                    "form.getForm().findField('new_address_id').setValue(values.get('address_id'));",
                    "",
                    "form.getForm().findField('address_id').hide();",
                    "form.getForm().findField('new_address_id').hide();",
                    "winAddEnergomer.setTitle('Добовление прибора учета');",
                    "winAddEnergomer.show();"
                ],
                "name": "click",
                "scope": "me"
            },
            "name": "onAddAppEnergomerClick",
            "designerId": "f4a042e1-dba0-48c3-b789-f53c6beaf6e2"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|params": [
                    "value"
                ],
                "fn": "addEnergomerApp",
                "implHandler": [
                    "// in use",
                    "var me = this;",
                    "//STORE",
                    "var stUser = Ext.data.StoreManager.get(\"StUser\");",
                    "var StEnergomer = Ext.data.StoreManager.get(\"StEnergomer\");",
                    "//LOGIN & PASSWORD",
                    "var values =stUser.getAt(0);",
                    "var params = {",
                    "    login:values.get('login'),",
                    "    password:values.get('password'),",
                    "    address_id:values.get('address_id'),",
                    "    house_id:values.get('house_id'),",
                    "    address:values.get('address'),",
                    "    what:\"addAppEnergomer\"",
                    "};",
                    "",
                    "//GRID",
                    "var grAppEnergomer= Ext.getCmp('grAppEnergomer');",
                    "//LOGIKA",
                    "",
                    "Ext.Object.merge(value, params);",
                    "QueryEnergomer.addEnergomer(value,function(results){",
                    "    if (results.success){",
                    "        StEnergomer.load({",
                    "            params: {",
                    "                what:'AppEnergomer',",
                    "                address_id: value.address_id,",
                    "                energomer_id: value.energomer_id,",
                    "                login:value.login,",
                    "                password:value.password",
                    "            },",
                    "            callback: function(records,operation,success){",
                    "                if(success){",
                    "                    grAppEnergomer.getView().getSelectionModel().select(0);",
                    "                    Ext.MessageBox.show({",
                    "                        title: 'Добавление прибора учета',",
                    "                        msg: results.msg,",
                    "                        buttons: Ext.MessageBox.OK,",
                    "                        icon: Ext.MessageBox.INFO",
                    "                    });",
                    "                }",
                    "            },",
                    "            scope:this",
                    "        });",
                    "",
                    "    }",
                    "});"
                ]
            },
            "name": "addEnergomerApp",
            "designerId": "64270c3b-7a87-4453-a74a-db5a01278dd1"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|params": [
                    "value"
                ],
                "fn": "editEnergomerApp",
                "implHandler": [
                    "// in use",
                    "//var me = this;",
                    "//STORE",
                    "var stUser = Ext.data.StoreManager.get(\"StUser\");",
                    "var stPribor = Ext.data.StoreManager.get(\"StEnergomer\");",
                    "//LOGIN & PASSWORD",
                    "",
                    "var values =stUser.getAt(0);",
                    "var params = {",
                    "    login:values.get('login'),",
                    "    password:values.get('password'),",
                    "    address_id:values.get('address_id'),",
                    "    address:values.get('address'),",
                    "    house_id:values.get('house_id'),",
                    "    rowind:values.get('rowind'),",
                    "    what:\"editAppEnergomer\"",
                    "};",
                    "",
                    "//GRID",
                    "var grAppPribor = Ext.getCmp('grAppEnergomer');",
                    "//LOGIKA",
                    "",
                    "Ext.Object.merge(value, params);",
                    "QueryEnergomer.addEnergomer(value,function(results){",
                    "",
                    "    if (results.success){",
                    "        stPribor.load({",
                    "            params: {",
                    "                what:'AppEnergomer',",
                    "                address_id: value.address_id,",
                    "                energomer_id: value.energomer_id,",
                    "                login:value.login,",
                    "                password:value.password",
                    "            },",
                    "            callback: function(records,operation,success){",
                    "                if(success){",
                    "                    grAppPribor.getView().getSelectionModel().select(value.rowind);",
                    "                    Ext.MessageBox.show({",
                    "                        title: 'Обновление прибора учета',",
                    "                        msg: results.msg,",
                    "                        buttons: Ext.MessageBox.OK,",
                    "                        icon: Ext.MessageBox.INFO",
                    "                    });",
                    "                }",
                    "            },",
                    "            scope:this",
                    "        });",
                    "",
                    "    }",
                    "});"
                ]
            },
            "name": "editEnergomerApp",
            "designerId": "133438e0-fb6e-4ee3-b906-4a6c0af00ef0"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|params": [
                    "value"
                ],
                "fn": "changeEnergomerApp",
                "implHandler": [
                    "// in use",
                    "var me = this;",
                    "//STORE",
                    "var stUser = Ext.data.StoreManager.get(\"StUser\");",
                    "var stPribor = Ext.data.StoreManager.get(\"StEnergomer\");",
                    "var stHPribor = Ext.data.StoreManager.get(\"StHEnergomer\");//QueryVodomer.getResults <AppHVodomer>",
                    "var StPPribora = Ext.data.StoreManager.get(\"StPEnergomer\");//QueryVodomer.getResults  <AllPokVodomera>",
                    "",
                    "//LOGIN & PASSWORD",
                    "",
                    "var values =stUser.getAt(0);",
                    "var params = {",
                    "    login:values.get('login'),",
                    "    password:values.get('password'),",
                    "    address_id:values.get('address_id'),",
                    "    address:values.get('address'),",
                    "    house_id:values.get('house_id'),",
                    "    what:\"changeAppEnergomer\"",
                    "};",
                    "",
                    "//GRID",
                    "var fmPribor = Ext.getCmp('fmEnergomer');",
                    "//LOGIKA",
                    "",
                    "Ext.Object.merge(value, params);",
                    "QueryEnergomer.addEnergomer(value,function(results){",
                    "    if (results.success===\"1\"){",
                    "        Ext.MessageBox.show({",
                    "            title: 'Замена прибора учета',",
                    "            msg: results.msg,",
                    "            buttons: Ext.MessageBox.OK,",
                    "            icon: Ext.MessageBox.INFO",
                    "        });",
                    "        fmPribor.getForm().reset();",
                    "",
                    "        //  grAppVodomerKassa.getView().refresh();",
                    "        stPribor.load({",
                    "            params: {",
                    "                what:'AppEnergomer',",
                    "                address_id: value.address_id,",
                    "                energomer_id: value.energomer_id,",
                    "                login:value.login,",
                    "                password:value.password",
                    "            },",
                    "            scope:this",
                    "        });",
                    "        stHPribor.load({",
                    "            params: {",
                    "                what:'AppHEnergomer',",
                    "                address_id: value.address_id,",
                    "                what_id: value.address_id,",
                    "                login:value.login,",
                    "                password:value.password",
                    "            },",
                    "            scope:this",
                    "        });",
                    "        StPPribora.removeAll();",
                    "        ",
                    "    }else {",
                    "        Ext.MessageBox.show({",
                    "            title: 'Замена прибора учета',",
                    "            msg: results.msg,",
                    "            buttons: Ext.MessageBox.OK,",
                    "            icon: Ext.MessageBox.INFO",
                    "        });",
                    "    }",
                    "});",
                    ""
                ]
            },
            "name": "changeEnergomerApp",
            "designerId": "659e3fe0-0e5a-428f-a577-3407106fd622"
        },
        {
            "type": "controlleraction",
            "reference": {
                "name": "listeners",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|controlQuery": "#btAddEnergomer",
                "designer|params": [
                    "button",
                    "e",
                    "eOpts"
                ],
                "designer|targetType": "MyButton160",
                "fn": "onBtAddEnergomerClick",
                "implHandler": [
                    "// in use",
                    "var me = this;",
                    "//CONTROLLER",
                    "",
                    "var value = button.findParentByType('form').getValues();",
                    "//STORE",
                    "",
                    "var stUser = Ext.data.StoreManager.get(\"StUser\");",
                    "var values =stUser.getAt(0);",
                    "var vibor = values.get('vibor');",
                    "this.getWinAddEnergomer().close();",
                    "switch (vibor){",
                    "    case 'addAppEnergomer':  // ВЫБРАНА КВАРТИРА",
                    "        me.addEnergomerApp(value);",
                    "        break;",
                    "    case 'editAppEnergomer':  // ВЫБРАНА КВАРТИРА",
                    "        me.editEnergomerApp(value);",
                    "        break;",
                    "    case 'changeAppEnergomer':  // ВЫБРАНА КВАРТИРА",
                    "        me.changeEnergomerApp(value);",
                    "        break;",
                    "",
                    "}"
                ],
                "name": "click",
                "scope": "me"
            },
            "name": "onBtAddEnergomerClick",
            "designerId": "56bd84c7-ff58-4819-8f8f-2e23574472cc"
        },
        {
            "type": "controlleraction",
            "reference": {
                "name": "listeners",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|controlQuery": "#delTekPokEnergomer",
                "designer|params": [
                    "button",
                    "e",
                    "eOpts"
                ],
                "designer|targetType": "MyButton40",
                "fn": "onDelTekPokEnergomerClick",
                "implHandler": [
                    "// in use",
                    "var me = this;",
                    "//STORE",
                    "",
                    "var stUser = Ext.data.StoreManager.get(\"StUser\");",
                    "var StPPribora = Ext.data.StoreManager.get(\"StPEnergomer\");//QueryVodomer.getResults  <AllPokVodomera>",
                    "var StTekPokPribora = Ext.data.StoreManager.get(\"StTekPokEnergomerov\");//QueryVodomer.getResults <TekPokVodomera>",
                    "",
                    "",
                    "",
                    "var values =stUser.getAt(0);",
                    "var params = {",
                    "    login:values.get('login'),",
                    "    password:values.get('password'),",
                    "    address_id:values.get('address_id'),",
                    "    house_id:values.get('house_id'),",
                    "    what:'AEnergomer'",
                    "",
                    "};",
                    "//GRID",
                    "",
                    "//var grTekNachAppVodomer = Ext.getCmp('grTekNachAppVodomer');",
                    "",
                    "//FORMA",
                    "",
                    "var delBtn = Ext.getCmp('delTekPokEnergomer');",
                    "var vklDelPokEn = Ext.getCmp('vklDelPokEn');",
                    "",
                    "delBtn.setDisabled(true);",
                    "vklDelPokEn.setValue(0);",
                    "",
                    "",
                    "",
                    "var fmPribor = Ext.getCmp('fmEnergomer');",
                    "var value = fmPribor.getValues();",
                    "",
                    "//LOGIKA",
                    "",
                    "Ext.Object.merge(value, params);",
                    "//console.log(value);",
                    "Ext.MessageBox.confirm({",
                    "    title: 'Удаление последних показаний счетчика',",
                    "    msg: 'Вы удаляете последнее показание по счетчику <br>Показание<b>'+value.tek+'</b><br>Подтвердите или отмените свои действия.',",
                    "    buttons: Ext.MessageBox.OKCANCEL,",
                    "    icon: Ext.MessageBox.ERROR,",
                    "    buttonText:{",
                    "        ok:'подтвеждаю',",
                    "        cancel:'отмена'",
                    "    },",
                    "    fn:function(btn,newValue){",
                    "        if(btn=='ok'){",
                    "            QueryEnergomer.delPokEnergomera(value,function(results){",
                    "                if (results.success){",
                    "                    Ext.MessageBox.show({title: 'Удаление последних показаний ',",
                    "                        msg: results.msg,",
                    "                        buttons: Ext.MessageBox.OK,",
                    "                        icon: Ext.MessageBox.INFO",
                    "                    });",
                    "                    fmPribor.getForm().findField('newValue').setValue(0);",
                    "                    StPPribora.load({",
                    "                        params: {",
                    "                            what:'AllPokEnergomera',",
                    "                            what_id: value.address_id,",
                    "                            address_id: value.address_id,",
                    "                            energomer_id: value.energomer_id,",
                    "                            login:value.login,",
                    "                            password:value.password",
                    "                        },",
                    "                        scope:this",
                    "                    });",
                    "",
                    "                    StTekPokPribora.load({",
                    "                        params: {",
                    "                            what:'TekPokEnergomera',",
                    "                            what_id: value.address_id,",
                    "                            address_id: value.address_id,",
                    "                            energomer_id: value.energomer_id,",
                    "                            login:value.login,",
                    "                            password:value.password",
                    "                        },",
                    "                        callback: function(records,operation,success){",
                    "                            if(success){",
                    "                                fmPribor.getForm().loadRecord(records[0]);",
                    "                            }",
                    "                        },",
                    "                        scope:this",
                    "                    });",
                    "",
                    "                }else{",
                    "                    Ext.MessageBox.show({title: 'Удаление последних показаний счетчика',",
                    "                        msg: results.msg,",
                    "                        buttons: Ext.MessageBox.OK,",
                    "                        icon: Ext.MessageBox.ERROR",
                    "                    });",
                    "                }",
                    "            });",
                    "        }",
                    "    }",
                    "});",
                    ""
                ],
                "name": "click",
                "scope": "me"
            },
            "name": "onDelTekPokEnergomerClick",
            "designerId": "1b3d7047-e2dd-407d-a4aa-ac3f895f68ad"
        },
        {
            "type": "controlleraction",
            "reference": {
                "name": "listeners",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|controlQuery": "#AddMeedlePokEnergomera",
                "designer|params": [
                    "button",
                    "e",
                    "eOpts"
                ],
                "designer|targetType": "MyButton78",
                "fn": "onAddMeedlePokEnergomeraClick",
                "implHandler": [
                    "// in use",
                    "//var me = this;",
                    "//STORE",
                    "",
                    "var stUser = Ext.data.StoreManager.get(\"StUser\");",
                    "//LOGIN & PASSWORD",
                    "var fmPribor = Ext.getCmp('fmEnergomer');",
                    "var insMeedlePok = fmPribor.down('#insMeedlePokEnergomera');",
                    "var date_st = fmPribor.getForm().findField('date_st');",
                    "var date_fin = fmPribor.getForm().findField('date_fin');",
                    "var mday = fmPribor.getForm().findField('mday');",
                    "var pok_ot = fmPribor.getForm().findField('pok_ot');",
                    "var pok_do = fmPribor.getForm().findField('pok_do');",
                    "var rday = fmPribor.getForm().findField('rday');",
                    "var kub_day = fmPribor.getForm().findField('kwh_day');",
                    "var newKubov = fmPribor.getForm().findField('newKwh');",
                    "var qty_kub = fmPribor.getForm().findField('qty_kwh');",
                    "",
                    "var value = fmPribor.getValues();",
                    "",
                    "",
                    "var values =stUser.getAt(0);",
                    "var params = {",
                    "    login:values.get('login'),",
                    "    password:values.get('password'),",
                    "    address_id:values.get('address_id'),",
                    "    address:values.get('address'),",
                    "    what:\"AddMeedlePokEnergomera\"",
                    "};",
                    "Ext.Object.merge(value, params);",
                    "QueryEnergomer.updateEnergomer(value,function(results){",
                    "    if (results.success){",
                    "",
                    "        insMeedlePok.setDisabled(false);",
                    "        date_st.setDisabled(false);",
                    "        date_fin.setDisabled(false);",
                    "        pok_do.setDisabled(false);",
                    "        pok_ot.setDisabled(false);",
                    "        mday.setDisabled(false);",
                    "        rday.setDisabled(false);",
                    "        kub_day.setDisabled(false);",
                    "        newKubov.setDisabled(false);",
                    "        qty_kub.setDisabled(false);",
                    "",
                    "        insMeedlePok.setDisabled(false);",
                    "        date_st.setValue(results.date_st);",
                    "        date_fin.setValue(results.date_fin);",
                    "        pok_ot.setValue(results.pok_ot);",
                    "        pok_do.setValue(results.pok_do);",
                    "        rday.setValue(results.rday);",
                    "        kub_day.setValue(results.kwh_day);",
                    "        mday.setValue(results.mday);",
                    "        qty_kub.setValue(results.qty_kwh);",
                    "        newKubov.setValue(results.kwh);",
                    "    } else {",
                    "        Ext.MessageBox.show({",
                    "            title: 'Обновление прибора учета',",
                    "            msg: results.msg,",
                    "            buttons: Ext.MessageBox.OK,",
                    "            icon: Ext.MessageBox.INFO",
                    "        });",
                    "    }",
                    "});",
                    ""
                ],
                "name": "click",
                "scope": "me"
            },
            "name": "onAddMeedlePokEnergomeraClick",
            "designerId": "ea1438c5-8fd1-42a8-892c-c2575a33e589"
        },
        {
            "type": "controlleraction",
            "reference": {
                "name": "listeners",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|controlQuery": "#insMeedlePokEnergomera",
                "designer|params": [
                    "button",
                    "e",
                    "eOpts"
                ],
                "designer|targetType": "MyButton43",
                "fn": "onInsMeedlePokEnergomeraClick",
                "name": "click",
                "scope": "me"
            },
            "name": "onInsMeedlePokEnergomeraClick",
            "designerId": "8b99b984-9516-4ed6-9400-533865e9e4c1"
        },
        {
            "type": "controlleraction",
            "reference": {
                "name": "listeners",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|controlQuery": "#insTekPokEnergomera",
                "designer|params": [
                    "button",
                    "e",
                    "eOpts"
                ],
                "designer|targetType": "MyButton41",
                "fn": "onInsTekPokEnergomeraClick",
                "implHandler": [
                    "// in use",
                    "var me = this;",
                    "//STORE",
                    "",
                    "var stUser = Ext.data.StoreManager.get(\"StUser\");",
                    "var stPPribora = Ext.data.StoreManager.get(\"StPEnergomer\");//QueryVodomer.getResults  <AppVodomer>",
                    "var stTekPokPribora = Ext.data.StoreManager.get(\"StTekPokEnergomerov\");//QueryVodomer.getResults <TekPokVodomera>",
                    "//LOGIN & PASSWORD",
                    "",
                    "var values =stUser.getAt(0);",
                    "var params = {",
                    "    login:values.get('login'),",
                    "    password:values.get('password'),",
                    "    address_id:values.get('address_id'),",
                    "    house_id:values.get('house_id'),",
                    "    what:'AEnergomer'",
                    "",
                    "};",
                    "//GRID",
                    "",
                    "//var grTekNachAppVodomer = Ext.getCmp('grTekNachAppVodomer');",
                    "",
                    "//FORMA",
                    "",
                    "var fmPribor = Ext.getCmp('fmEnergomer');",
                    "var value = fmPribor.getValues();",
                    "",
                    "//LOGIKA",
                    "",
                    "Ext.Object.merge(value, params);",
                    "var newValue = value.newValue;",
                    "var max =newValue - value.tek;",
                    "if (isNaN(newValue)){",
                    "    Ext.MessageBox.show({",
                    "        title: 'Проверка вводимых данных',",
                    "        msg: 'Введите число',",
                    "        buttons: Ext.MessageBox.OK,",
                    "        icon: Ext.MessageBox.ERROR",
                    "    });",
                    "    return false;",
                    "}else if (max < 0){",
                    "    Ext.MessageBox.show({",
                    "        title: 'Проверка вводимых данных',",
                    "        msg: 'Текущие показания <b>'+value.tek+'</b><br>Новые показания <b>'+newValue+'</b><br>Введите правильные показания !.',",
                    "        buttons: Ext.MessageBox.CANCEL,",
                    "        icon: Ext.MessageBox.ERROR,",
                    "        buttonText:{",
                    "            cancel:'отмена'",
                    "        },",
                    "        fn:function(btn,newValue){",
                    "            if(btn=='cancel'){",
                    "                fmPribor.getForm().findField('newValue').focus();",
                    "                return false;",
                    "            }",
                    "        }",
                    "    });",
                    "} else if(max === 0) {",
                    "    Ext.MessageBox.confirm({",
                    "        title: 'Проверка вводимых данных',",
                    "        msg: 'Вводимые показания теже что и предыдущие<br>Подтвердите или отмените вводимые показания.',",
                    "        buttons: Ext.MessageBox.OKCANCEL,",
                    "        icon: Ext.MessageBox.ERROR,",
                    "        buttonText:{",
                    "            ok:'подтвеждаю',",
                    "            cancel:'отмена'",
                    "        },",
                    "        fn:function(btn,newValue){",
                    "            if(btn=='cancel'){",
                    "                fmPribor.getForm().findField('newValue').focus();",
                    "                return false;",
                    "            }else{",
                    "                QueryEnergomer.newPokEnergomer(value,function(results){",
                    "                    if (results.success){",
                    "",
                    "                        fmPribor.getForm().findField('newValue').setValue(0);",
                    "                        stPPribora.load({",
                    "                            params: {",
                    "                                what:'AllPokEnergomera',",
                    "                                what_id: value.address_id,",
                    "                                address_id: value.address_id,",
                    "                                energomer_id: value.energomer_id,",
                    "                                login:value.login,",
                    "                                password:value.password",
                    "                            },",
                    "                            scope:this",
                    "                        });",
                    "                        stTekPokPribora.load({",
                    "                            params: {",
                    "                                what:'TekPokEnergomera',",
                    "                                what_id: value.address_id,",
                    "                                address_id: value.address_id,",
                    "                                energomer_id: value.energomer_id,",
                    "                                login:value.login,",
                    "                                password:value.password",
                    "                            },",
                    "                            callback: function(records,operation,success){",
                    "                                if(success){",
                    "                                    fmVodomer.getForm().loadRecord(records[0]);",
                    "                                }",
                    "                            },",
                    "                            scope:this",
                    "                        });",
                    "                    }",
                    "                });",
                    "            }",
                    "        }",
                    "    });",
                    "} else if(max > 500) {",
                    "    Ext.MessageBox.confirm({",
                    "        title: 'Проверка вводимых данных',",
                    "        msg: 'Вводимые показания <b>'+newValue+'</b> очень большие <b>'+ max +'</b> кВт-час<br>Подтвердите или отмените вводимые показания.',",
                    "        buttons: Ext.MessageBox.OKCANCEL,",
                    "        icon: Ext.MessageBox.ERROR,",
                    "        buttonText:{",
                    "            ok:'подтвеждаю',",
                    "            cancel:'отмена'",
                    "        },",
                    "        fn:function(btn,newValue){",
                    "            if(btn=='cancel'){",
                    "                fmPribor.getForm().findField('newValue').focus();",
                    "                return false;",
                    "            }else{",
                    "                QueryEnergomer.newPokEnergomer(value,function(results){",
                    "                    if (results.success){",
                    "",
                    "                        fmPribor.getForm().findField('newValue').setValue(0);",
                    "                        stPPribora.load({",
                    "                            params: {",
                    "                                what:'AllPokEnergomera',",
                    "                                what_id: value.address_id,",
                    "                                address_id: value.address_id,",
                    "                                energomer_id: value.energomer_id,",
                    "                                login:value.login,",
                    "                                password:value.password",
                    "                            },",
                    "                            scope:this",
                    "                        });",
                    "                        stTekPokPribora.load({",
                    "                            params: {",
                    "                                what:'TekPokEnergomera',",
                    "                                what_id: value.address_id,",
                    "                                address_id: value.address_id,",
                    "                                energomer_id: value.energomer_id,",
                    "                                login:value.login,",
                    "                                password:value.password",
                    "                            },",
                    "                            callback: function(records,operation,success){",
                    "                                if(success){",
                    "                                    fmPribor.getForm().loadRecord(records[0]);",
                    "                                }",
                    "                            },",
                    "                            scope:this",
                    "                        });",
                    "                    }",
                    "                });",
                    "            }",
                    "        }",
                    "    });",
                    "",
                    "",
                    "} else {",
                    "    QueryEnergomer.newPokEnergomer(value,function(results){",
                    "        if (results.success){",
                    "",
                    "            fmPribor.getForm().findField('newValue').setValue(0);",
                    "            stPPribora.load({",
                    "                params: {",
                    "                    what:'AllPokEnergomera',",
                    "                    what_id: value.address_id,",
                    "                    address_id: value.address_id,",
                    "                    energomer_id: value.energomer_id,",
                    "                    login:value.login,",
                    "                    password:value.password",
                    "                },",
                    "                scope:this",
                    "            });",
                    "",
                    "            stTekPokPribora.load({",
                    "                params: {",
                    "                    what:'TekPokEnergomera',",
                    "                    what_id: value.address_id,",
                    "                    address_id: value.address_id,",
                    "                    energomer_id: value.energomer_id,",
                    "                    login:value.login,",
                    "                    password:value.password",
                    "                },",
                    "                callback: function(records,operation,success){",
                    "                    if(success){",
                    "                        fmPribor.getForm().loadRecord(records[0]);",
                    "                    }",
                    "                },",
                    "                scope:this",
                    "            });",
                    "",
                    "        }",
                    "    });",
                    "}",
                    ""
                ],
                "name": "click",
                "scope": "me"
            },
            "name": "onInsTekPokEnergomeraClick",
            "designerId": "dab2d455-2a1c-43b8-87ee-7d4e72ea1d27"
        },
        {
            "type": "controlleraction",
            "reference": {
                "name": "listeners",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|controlQuery": "#grAppEnergomer",
                "designer|params": [
                    "model",
                    "selected",
                    "eOpts"
                ],
                "designer|targetType": "MyGridPanel20",
                "fn": "onGrAppEnergomerSelectionChange",
                "implHandler": [
                    "//in use",
                    "var me =this;",
                    "",
                    "//STORE",
                    "",
                    "var stUser = Ext.data.StoreManager.get(\"StUser\");",
                    "var StPPribora = Ext.data.StoreManager.get(\"StPEnergomer\");//QueryVodomer.getResults  <AllPokVodomera>",
                    "var StTekPokPribora = Ext.data.StoreManager.get(\"StTekPokEnergomerov\");//QueryVodomer.getResults <TekPokVodomera>",
                    "",
                    "//LOGIN & PASSWORD",
                    "",
                    "var values =stUser.getAt(0);",
                    "var login = values.get('login');",
                    "var password = values.get('password');",
                    "var address_id = values.get('address_id');",
                    "var house_id = values.get('house_id');",
                    "",
                    "//GRID",
                    "",
                    "var grAppHVodomer = Ext.getCmp('grAppHEnergomer');",
                    "",
                    "//FORMA",
                    "",
                    "var fmPribor = Ext.getCmp('fmEnergomer');",
                    "",
                    "//var fs = fmVodomer.down('#fsInsPokVodMiddle');",
                    "//var btnHand = fmVodomer.down('#insHandPokVod');",
                    "var btnNorm = fmPribor.down('#insTekPokEnergomera');",
                    "var tekValue = fmPribor.getForm().findField('tekp');",
                    "var newValue = fmPribor.getForm().findField('newValue');",
                    "",
                    "var AddMeedlePokVod = fmPribor.down('#AddMeedlePokEnergomera');",
                    "var insMeedlePokVod = fmPribor.down('#insMeedlePokEnergomera');",
                    "var date_st = fmPribor.getForm().findField('date_st');",
                    "var date_fin = fmPribor.getForm().findField('date_fin');",
                    "var date_ao = fmPribor.getForm().findField('date_ao');",
                    "var date_ar = fmPribor.getForm().findField('date_ar');",
                    "var pok_ot = fmPribor.getForm().findField('pok_ot');",
                    "var pok_do = fmPribor.getForm().findField('pok_do');",
                    "var rday = fmPribor.getForm().findField('rday');",
                    "var mday = fmPribor.getForm().findField('mday');",
                    "var kub_day = fmPribor.getForm().findField('kwh_day');",
                    "var qty_kub = fmPribor.getForm().findField('qty_kwh');",
                    "",
                    "var newKubov = fmPribor.getForm().findField('newKwh');",
                    "",
                    "",
                    "//LOGIKA",
                    "",
                    "grAppHVodomer.getView().getSelectionModel().deselectAll();",
                    "",
                    "if (selected.length){",
                    "    StPPribora.load({",
                    "        params: {",
                    "            login:login,",
                    "            password:password,",
                    "            address_id: address_id,",
                    "            what:'AllPokEnergomera',",
                    "            what_id: selected[0].data.address_id,",
                    "            energomer_id: selected[0].data.energomer_id",
                    "        },",
                    "        scope:this",
                    "    });",
                    "    fmPribor.down('#delTekPokEnergomer').setDisabled(true);",
                    "    fmPribor.getForm().findField('vkl_del').setValue(0);",
                    "    StTekPokPribora.load({",
                    "        params: {",
                    "            login:login,",
                    "            password:password,",
                    "            address_id: address_id,",
                    "            what:'TekPokEnergomera',",
                    "            what_id: selected[0].data.address_id,",
                    "            energomer_id: selected[0].data.energomer_id",
                    "        },",
                    "        callback: function(records,operation,success){",
                    "            if(success){",
                    "                fmPribor.getForm().loadRecord(records[0]);",
                    "",
                    "            }",
                    "        },",
                    "        scope:this",
                    "    });",
                    "    if (selected[0].data.out===1){",
                    "        AddMeedlePokVod.setDisabled(true);",
                    "        insMeedlePokVod.setDisabled(true);",
                    "        date_ao.setDisabled(false);",
                    "        date_ar.setDisabled(false);",
                    "        date_st.setDisabled(true);",
                    "        date_fin.setDisabled(true);",
                    "        qty_kub.setDisabled(true);",
                    "        pok_do.setDisabled(true);",
                    "        pok_ot.setDisabled(true);",
                    "        rday.setDisabled(true);",
                    "        mday.setDisabled(true);",
                    "        qty_kub.setDisabled(true);",
                    "        kub_day.setDisabled(true);",
                    "        newKubov.setDisabled(true);",
                    "        btnNorm.setDisabled(true);",
                    "        newValue.setDisabled(true);",
                    "",
                    "    } else {",
                    "        AddMeedlePokVod.setDisabled(true);",
                    "        insMeedlePokVod.setDisabled(true);",
                    "        date_ao.setDisabled(true);",
                    "        date_ar.setDisabled(true);",
                    "        date_st.setDisabled(true);",
                    "        date_fin.setDisabled(true);",
                    "        pok_do.setDisabled(true);",
                    "        pok_ot.setDisabled(true);",
                    "        mday.setDisabled(true);",
                    "        rday.setDisabled(true);",
                    "        qty_kub.setDisabled(true);",
                    "        kub_day.setDisabled(true);",
                    "        newKubov.setDisabled(true);",
                    "        btnNorm.setDisabled(false);",
                    "        newValue.setDisabled(false);",
                    "    }",
                    "}",
                    ""
                ],
                "name": "selectionchange",
                "scope": "me"
            },
            "name": "onGrAppEnergomerSelectionChange",
            "designerId": "7942a9c7-9faf-41c2-bfe1-f86abbb8def0"
        },
        {
            "type": "controlleraction",
            "reference": {
                "name": "listeners",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|controlQuery": "#grAllPokEnergomer",
                "designer|params": [
                    "model",
                    "selected",
                    "eOpts"
                ],
                "designer|targetType": "Ext.grid.Panel",
                "fn": "onGrAllPokEnergomerSelectionChange",
                "implHandler": [
                    "//in use",
                    "var me =this;",
                    "",
                    "//STORE",
                    "",
                    "var stUser = Ext.data.StoreManager.get(\"StUser\");",
                    "var stTekPokPribora = Ext.data.StoreManager.get(\"StTekPokEnergomerov\");//QueryVodomer.getResults <TekPokVodomera>",
                    "",
                    "//LOGIN & PASSWORD",
                    "",
                    "var values =stUser.getAt(0);",
                    "var login = values.get('login');",
                    "var password = values.get('password');",
                    "var address_id = values.get('address_id');",
                    "var house_id = values.get('house_id');",
                    "",
                    "//GRID",
                    "",
                    "",
                    "//FORMA",
                    "",
                    "var fmVodomer = Ext.getCmp('fmEnergomer');",
                    "var grAppPribor = Ext.getCmp('grAppEnergomer');",
                    "",
                    "",
                    "var btnNorm = fmVodomer.down('#insTekPokEnergomera');",
                    "var tekValue = fmVodomer.getForm().findField('tekp');",
                    "var newValue = fmVodomer.getForm().findField('newValue');",
                    "",
                    "var AddMeedlePokVod = fmVodomer.down('#AddMeedlePokEnergomera');",
                    "var insMeedlePokVod = fmVodomer.down('#insMeedlePokEnergomera');",
                    "var date_st = fmVodomer.getForm().findField('date_st');",
                    "var date_fin = fmVodomer.getForm().findField('date_fin');",
                    "var date_ao = fmVodomer.getForm().findField('date_ao');",
                    "var date_ar = fmVodomer.getForm().findField('date_ar');",
                    "var pok_ot = fmVodomer.getForm().findField('pok_ot');",
                    "var pok_do = fmVodomer.getForm().findField('pok_do');",
                    "var rday = fmVodomer.getForm().findField('rday');",
                    "var mday = fmVodomer.getForm().findField('mday');",
                    "var kub_day = fmVodomer.getForm().findField('kwh_day');",
                    "var qty_kub = fmVodomer.getForm().findField('qty_kwh');",
                    "",
                    "var newKubov = fmVodomer.getForm().findField('newKwh');",
                    "grAppPribor.getView().getSelectionModel().deselectAll();",
                    "",
                    "",
                    "",
                    "//LOGIKA",
                    "",
                    "",
                    "if (selected.length){",
                    "",
                    "    stTekPokPribora.load({",
                    "        params: {",
                    "            login:login,",
                    "            password:password,",
                    "            address_id: address_id,",
                    "            what:'TekPokEnergomera',",
                    "            what_id: selected[0].data.address_id,",
                    "            pok_id: selected[0].data.pok_id,",
                    "            energomer_id: selected[0].data.energomer_id",
                    "        },",
                    "        callback: function(records,operation,success){",
                    "            if(success){",
                    "                fmVodomer.getForm().loadRecord(records[0]);",
                    "",
                    "            }",
                    "        },",
                    "        scope:this",
                    "    });",
                    "    if (selected[0].data.pok_ot!==0){",
                    "        AddMeedlePokVod.setDisabled(true);",
                    "        insMeedlePokVod.setDisabled(true);",
                    "        date_ao.setDisabled(false);",
                    "        date_ar.setDisabled(false);",
                    "        date_st.setDisabled(false);",
                    "        date_fin.setDisabled(false);",
                    "        qty_kub.setDisabled(false);",
                    "        pok_do.setDisabled(false);",
                    "        pok_ot.setDisabled(false);",
                    "        rday.setDisabled(false);",
                    "        mday.setDisabled(false);",
                    "        qty_kub.setDisabled(false);",
                    "        kub_day.setDisabled(false);",
                    "        newKubov.setDisabled(true);",
                    "        btnNorm.setDisabled(true);",
                    "        newValue.setDisabled(true);",
                    "",
                    "    } else {",
                    "        AddMeedlePokVod.setDisabled(true);",
                    "        insMeedlePokVod.setDisabled(true);",
                    "        date_ao.setDisabled(true);",
                    "        date_ar.setDisabled(true);",
                    "        date_st.setDisabled(true);",
                    "        date_fin.setDisabled(true);",
                    "        pok_do.setDisabled(true);",
                    "        pok_ot.setDisabled(true);",
                    "        mday.setDisabled(true);",
                    "        rday.setDisabled(true);",
                    "        qty_kub.setDisabled(true);",
                    "        kub_day.setDisabled(true);",
                    "        newKubov.setDisabled(true);",
                    "        btnNorm.setDisabled(true);",
                    "        newValue.setDisabled(true);",
                    "    }",
                    "}",
                    ""
                ],
                "name": "selectionchange"
            },
            "name": "onGrAllPokEnergomerSelectionChange",
            "designerId": "588f8dcf-dff2-4e29-8a12-a5445780f9c1"
        },
        {
            "type": "controlleraction",
            "reference": {
                "name": "listeners",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|controlQuery": "#grTarifHousesEnergy",
                "designer|params": [
                    "model",
                    "selected",
                    "eOpts"
                ],
                "designer|targetType": "Ext.grid.Panel",
                "fn": "onGrTarifHousesEnergySelectionChange",
                "implHandler": [
                    "//STORE",
                    "",
                    "var stAddress = Ext.data.StoreManager.get('StAddressOrg');",
                    "var form = Ext.getCmp('fmEnergy');",
                    "var btAddPerer = Ext.getCmp('btAddPererEnergy');",
                    "var viborTarif = Ext.getCmp('cbTarifEnergy');",
                    "var btAddNachEnergy = Ext.getCmp('btAddNachEnergy');",
                    "var btAddNachEnergyPrev = Ext.getCmp('btAddNachEnergyPrev');",
                    "var btnInsTarifEnergy = Ext.getCmp('btnInsTarifEnergy');",
                    "var tarif = Ext.getCmp('tarEnergy');",
                    "",
                    "var dt = new Date();",
                    "var lastDay = Ext.Date.getLastDateOfMonth( dt ) ;",
                    "var firstDay = Ext.Date.getFirstDateOfMonth( dt ) ;",
                    "",
                    "//console.log(selected,index);",
                    "if (selected.length > 0) {",
                    "    form.getForm().loadRecord(selected[0]);",
                    "",
                    "    if (Ext.Date.format(Ext.Date.getFirstDateOfMonth(selected[0].data.data), 'Y-m-d') ==",
                    "        Ext.Date.format(Ext.Date.getFirstDateOfMonth(form.getForm().findField('data_nach').getValue()), 'Y-m-d')) {",
                    "        btAddNachEnergy.setDisabled(false);",
                    "        btAddNachEnergyPrev.setDisabled(false);",
                    "        btAddPerer.setDisabled(true);",
                    "        btnInsTarifEnergy.setDisabled(false);",
                    "",
                    "        form.getForm().findField('sdata').setValue(\"0\");",
                    "        form.getForm().findField('fdata').setValue(\"0\");",
                    "        form.getForm().findField('energy').setValue(\"\");",
                    "        form.getForm().findField('info').setValue(\"\");",
                    "        form.getForm().findField('ch_energy').setValue(\"\");",
                    "        form.getForm().findField('address_ot').clearValue();",
                    "        form.getForm().findField('address_do').clearValue();",
                    "        form.getForm().findField('allkv').setValue(1);",
                    "        viborTarif.clearValue();",
                    "        viborTarif.setDisabled(false);",
                    "",
                    "",
                    "",
                    "    }else{",
                    "        btAddNachEnergy.setDisabled(true);",
                    "        btAddNachEnergyPrev.setDisabled(true);",
                    "        btAddPerer.setDisabled(false);",
                    "        form.getForm().findField('sdata').setValue(Ext.Date.format(Ext.Date.getFirstDateOfMonth(selected[0].data.data), 'Y-m-d'));",
                    "        form.getForm().findField('fdata').setValue(Ext.Date.format( Ext.Date.getLastDateOfMonth(selected[0].data.data), 'Y-m-d'));",
                    "        form.getForm().findField('address_ot').clearValue();",
                    "        form.getForm().findField('address_do').clearValue();",
                    "        form.getForm().findField('allkv').setValue(1);",
                    "        form.getForm().findField('tarif_manual').setValue(0);",
                    "        viborTarif.setDisabled(true);",
                    "        btnInsTarifEnergy.setDisabled(true);",
                    "    }",
                    "    tarif.setValue(0);",
                    "",
                    "",
                    "    stAddress.removeAll();",
                    "    stAddress.load({",
                    "        params: {",
                    "            what:'AddressFromHousesTarif',",
                    "            house_id: selected[0].data.house_id",
                    "        },",
                    "        callback: function(records,operation,success){",
                    "            if(success){",
                    "                form.getForm().findField('address_ot').setValue(records[0].get('address_id'));",
                    "                form.getForm().findField('address_do').setValue(records[0].get('address_id'));",
                    "            }",
                    "",
                    "        },",
                    "        scope:this",
                    "    });",
                    "",
                    "}",
                    ""
                ],
                "name": "selectionchange"
            },
            "name": "onGrTarifHousesEnergySelectionChange",
            "designerId": "72ee661b-e212-478b-99d0-fe67ee6edef9"
        },
        {
            "type": "controlleraction",
            "reference": {
                "name": "listeners",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|controlQuery": "#grAppHEnergomer",
                "designer|params": [
                    "model",
                    "selected",
                    "eOpts"
                ],
                "designer|targetType": "Ext.grid.Panel",
                "fn": "onGrAppHEnergomerSelectionChange",
                "implHandler": [
                    "//in use",
                    "var me =this;",
                    "",
                    "//STORE",
                    "",
                    "var stUser = Ext.data.StoreManager.get(\"StUser\");",
                    "var stPPribor = Ext.data.StoreManager.get(\"StPEnergomer\");//QueryVodomer.getResults  <AllPokVodomera>",
                    "var stTekPokPribora = Ext.data.StoreManager.get(\"StTekPokEnergomerov\");//QueryVodomer.getResults <TekPokVodomera>",
                    "",
                    "//LOGIN & PASSWORD",
                    "",
                    "var values =stUser.getAt(0);",
                    "var login = values.get('login');",
                    "var password = values.get('password');",
                    "var address_id = values.get('address_id');",
                    "var house_id = values.get('house_id');",
                    "",
                    "//GRID",
                    "",
                    "var grAppPribor = Ext.getCmp('grAppEnergomer');",
                    "",
                    "//FORMA",
                    "",
                    "var fmPribor = Ext.getCmp('fmEnergomer');",
                    "",
                    "//LOGIKA",
                    "",
                    "grAppPribor.getView().getSelectionModel().deselectAll();",
                    "",
                    "if (selected.length){",
                    "    stTekPokPribora.removeAll();",
                    "",
                    "    stPPribor.load({",
                    "        params: {",
                    "            login:login,",
                    "            password:password,",
                    "            address_id: address_id,",
                    "            what:'AllPokEnergomera',",
                    "            what_id: selected[0].data.address_id,",
                    "            energomer_id: selected[0].data.energomer_id",
                    "        },",
                    "        scope:this",
                    "    });",
                    "    fmPribor.getForm().reset();",
                    "",
                    "}",
                    ""
                ],
                "name": "selectionchange"
            },
            "name": "onGrAppHEnergomerSelectionChange",
            "designerId": "baee8d64-0926-4522-aa47-f7936f6e084f"
        },
        {
            "type": "controllerref",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "ref": "WinAddEnergomer",
                "selector": "#winAddEnergomer"
            },
            "name": "WinAddEnergomer",
            "designerId": "689b8ea9-d965-4e2e-96d5-341ab394047a"
        },
        {
            "type": "controlleraction",
            "reference": {
                "name": "listeners",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|controlQuery": "#btAddNachEnergy",
                "designer|params": [
                    "button",
                    "e",
                    "eOpts"
                ],
                "designer|targetType": "Ext.button.Button",
                "fn": "onBtAddNachEnergyClick",
                "implHandler": [
                    "// in use",
                    "var me = this;",
                    "//STORE",
                    "var stUser = Ext.data.StoreManager.get(\"StUser\");",
                    "var grid =  Ext.getCmp('grTarifHousesEnergy');",
                    "",
                    "var getRowSelection = grid.getSelectionModel().getSelection()[0];",
                    "var house_id = getRowSelection.get('house_id');",
                    "//LOGIN & PASSWORD",
                    "var values =stUser.getAt(0);",
                    "var params = {",
                    "    login:values.get('login'),",
                    "    password:values.get('password'),",
                    "    what:\"nachislenie_energy_now\",",
                    "    house_id:house_id",
                    "};",
                    "",
                    "",
                    "//LOGIKA",
                    "",
                    "var myMask= Ext.Msg.show({",
                    "    title:'Начисление...',",
                    "    msg: 'Начисление услуги.Ожидайте...',",
                    "    buttons: Ext.Msg.CANCEL,",
                    "    wait: true,",
                    "    modal: true,",
                    "    icon: Ext.Msg.INFO",
                    "});",
                    "",
                    "QueryAddress.updateRecords(params,function(results){",
                    "    if(results.success===\"1\"){",
                    "        myMask.close();",
                    "        Ext.MessageBox.show({",
                    "            title: 'Начисление услуги',",
                    "            msg: results.msg,",
                    "            buttons: Ext.MessageBox.OK,",
                    "            icon: Ext.MessageBox.INFO",
                    "        });",
                    "    } else {",
                    "        myMask.close();",
                    "        Ext.MessageBox.show({",
                    "            title: 'Начисление услуги',",
                    "            msg: results.msg,",
                    "            buttons: Ext.MessageBox.OK,",
                    "            icon: Ext.MessageBox.ERROR",
                    "        });",
                    "    }",
                    "",
                    "});"
                ],
                "name": "click"
            },
            "name": "onBtAddNachEnergyClick",
            "designerId": "56a3f89b-5e9e-4c18-b919-ac5693305cee"
        },
        {
            "type": "controlleraction",
            "reference": {
                "name": "listeners",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|controlQuery": "#btAddNachEnergyPrev",
                "designer|params": [
                    "button",
                    "e",
                    "eOpts"
                ],
                "designer|targetType": "Ext.button.Button",
                "fn": "onBtAddNachEnergyPrevClick",
                "implHandler": [
                    "// in use",
                    "var me = this;",
                    "//STORE",
                    "var stUser = Ext.data.StoreManager.get(\"StUser\");",
                    "var grid =  Ext.getCmp('grTarifHousesEnergy');",
                    "",
                    "var getRowSelection = grid.getSelectionModel().getSelection()[0];",
                    "var house_id = getRowSelection.get('house_id');",
                    "//LOGIN & PASSWORD",
                    "var values =stUser.getAt(0);",
                    "var params = {",
                    "    login:values.get('login'),",
                    "    password:values.get('password'),",
                    "    what:\"nachislenie_energy_prev\",",
                    "    house_id:house_id",
                    "};",
                    "",
                    "",
                    "//LOGIKA",
                    "",
                    "var myMask= Ext.Msg.show({",
                    "    title:'Начисление...',",
                    "    msg: 'Начисление услуги.Ожидайте...',",
                    "    buttons: Ext.Msg.CANCEL,",
                    "    wait: true,",
                    "    modal: true,",
                    "    icon: Ext.Msg.INFO",
                    "});",
                    "",
                    "QueryAddress.updateRecords(params,function(results){",
                    "    if(results.success===\"1\"){",
                    "        myMask.close();",
                    "        Ext.MessageBox.show({",
                    "            title: 'Начисление услуги',",
                    "            msg: results.msg,",
                    "            buttons: Ext.MessageBox.OK,",
                    "            icon: Ext.MessageBox.INFO",
                    "        });",
                    "    } else {",
                    "        myMask.close();",
                    "        Ext.MessageBox.show({",
                    "            title: 'Начисление услуги',",
                    "            msg: results.msg,",
                    "            buttons: Ext.MessageBox.OK,",
                    "            icon: Ext.MessageBox.ERROR",
                    "        });",
                    "    }",
                    "",
                    "});"
                ],
                "name": "click"
            },
            "name": "onBtAddNachEnergyPrevClick",
            "designerId": "53fe6cff-84a9-40e4-8156-ac188e711cdb"
        }
    ]
}