/*
 * File: app/controller/AppTeplomer.js
 *
 * This file was generated by Sencha Architect version 3.2.0.
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 5.1.x library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 5.1.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('Osbb.controller.AppTeplomer', {
    extend: 'Ext.app.Controller',

    refs: {
        WinAddTeplomer: {
            autoCreate: true,
            selector: '#winAddTeplomer',
            xtype: 'winaddteplomer'
        }
    },

    control: {
        "#tabOtoplenie": {
            activate: 'onTabOtoplenieActivate'
        },
        "#tabAppTeplomer": {
            activate: 'onTabAppTeplomerActivate'
        },
        "#grAppTeplomer": {
            selectionchange: 'onGrAppTeplomerSelectionChange'
        },
        "#grTarifHousesOtoplenie": {
            selectionchange: 'onGrTarifHousesOtoplenieSelectionChange'
        },
        "#delTekPokAppTeplomera": {
            click: 'onDelTekPokTeplomeraClick'
        },
        "#insTekPokAppTeplomer": {
            click: 'onInsTekPokTeplomerClick'
        },
        "#addAppTeplomer": {
            click: 'onAddAppTeplomerClick'
        },
        "#newPokAppTepl": {
            specialkey: 'onNewPokAppTeplSpecialkey'
        },
        "#btAddTeplomer": {
            click: 'onBtAddTeplomerClick'
        }
    },

    onTabOtoplenieActivate: function(component, eOpts) {
        //STORE
        var form = Ext.getCmp('fmOtoplenie');
        var btAddNach = Ext.getCmp('btAddNachOtoplenie');
        //var btAddPerer = Ext.getCmp('btAddPererEnergy');
        //var pnPerer = Ext.getCmp('pnPererEnergy');
        var grid = Ext.getCmp('grTarifHousesOtoplenie');
        var store = grid.getStore();
        store.removeAll();
        var dt = new Date();
        var firstDay = Ext.Date.getFirstDateOfMonth( dt ) ;
        form.getForm().reset();
        form.getForm().findField('data_nach').setValue(firstDay);
        btAddNach.setText("Начислить отопление за период   "+ Ext.Date.format(firstDay, 'F,Y'));
        //btAddPerer.setText("Перерасчитать электроэнергию за период  "+ Ext.Date.format(firstDay, 'F,Y'));
        //pnPerer.setTitle("Перерасчет электроэнергию за период "+ Ext.Date.format(firstDay, 'F,Y'));

    },

    onTabAppTeplomerActivate: function(component, eOpts) {
        //in use
        var me = this;

        //STORE

        var stUser = Ext.data.StoreManager.get("StUser");

        //LOGIN & PASSWORD

        var values =stUser.getAt(0);
        var login = values.get('login');
        var password = values.get('password');
        var address_id = values.get('address_id');
        var address = values.get('address');
        var house_id = values.get('house_id');
        var prixod_id = values.get('prixod_id');

        //LOGIKA

        //var showAddressAppTeplomer = Ext.getCmp('showAddressAppTeplomer');
        //FORM
        var fmAppTeplomer = Ext.getCmp('fmAppTeplomer');

        //STORE
        var stTeplomer = Ext.data.StoreManager.get("StTeplomer");//QueryTeplomer.getResults  <AppTeplomer>
        var stHTeplomer = Ext.data.StoreManager.get("StHTeplomer");//QueryTeplomer.getResults <AppHTeplomer>
        var StAllPokTeplomera = Ext.data.StoreManager.get("StAllPokTeplomera");//QueryTeplomer.getResults <AppHTeplomer>
        StAllPokTeplomera.removeAll();

        //showAddressAppTeplomer.setText(address).show();


        //tabAppTeplomer

        fmAppTeplomer.getForm().reset();


        stTeplomer.load({
            params: {
                what:'AppTeplomer',
                what_id: address_id,
                address_id: address_id,
                login:login,
                password:password
            },
            scope:this
        });


        stHTeplomer.load({
            params: {
                what:'AppHTeplomer',
                what_id: address_id,
                address_id: address_id,
                login:login,
                password:password
            },
            scope:this
        });

    },

    onGrAppTeplomerSelectionChange: function(model, selected, eOpts) {
        //in use
        var me =this;

        //STORE

        var stUser = Ext.data.StoreManager.get("StUser");
        var stTekPokTeplomera = Ext.data.StoreManager.get("StTekPokTeplomera");//QueryTeplomer.getResults <TekPokTeplomera>
        var stAllPokTeplomera = Ext.data.StoreManager.get("StAllPokTeplomera");//QueryTeplomer.getResults <TekPokTeplomera>

        //LOGIN & PASSWORD

        var values =stUser.getAt(0);
        var login = values.get('login');
        var password = values.get('password');
        var address_id = values.get('address_id');
        var house_id = values.get('house_id');

        //FORMA

        var fmTeplomer = Ext.getCmp('fmAppTeplomer');

        //LOGIKA

        if (selected.length){

            fmTeplomer.getForm().findField('fmAppTeplomer_id').setValue(selected[0].data.teplomer_id);
            fmTeplomer.getForm().findField('AppT_pok_id').setValue(selected[0].data.pok_id);
            stTekPokTeplomera.load({
                params: {
                    login:login,
                    password:password,
                    address_id: address_id,
                    what:'TekPokTeplomera',
                    what_id: selected[0].data.teplomer_id,
                    teplomer_id: selected[0].data.teplomer_id,
                    nomer: selected[0].data.nomer
                },
                callback: function(records,operation,success){
                    if(success && records.length){
                        fmTeplomer.getForm().loadRecord(records[0]);

                    }
                },
                scope:this
            });



            stAllPokTeplomera.load({
                params: {
                    login:login,
                    password:password,
                    address_id: address_id,
                    what:'AllPokTeplomera',
                    what_id: selected[0].data.teplomer_id,
                    teplomer_id: selected[0].data.teplomer_id,
                    nomer: selected[0].data.nomer
                },
                scope:this
            });



        }

    },

    onGrTarifHousesOtoplenieSelectionChange: function(model, selected, eOpts) {
        //STORE

        var stAddress = Ext.data.StoreManager.get('StAddressOrg');
        var form = Ext.getCmp('fmOtoplenie');
        var btAddPerer = Ext.getCmp('btAddPererOtoplenie');
        var viborTarif = Ext.getCmp('cbTarifOtoplenie');
        var btAddNachOtoplenie = Ext.getCmp('btAddNachOtoplenie');
        var btAddPererNach = Ext.getCmp('btAddPererNach');
        var btAddNachOtopleniePrev = Ext.getCmp('btAddNachOtopleniePrev');
        var btAddNachPtn = Ext.getCmp('btAddNachPtn');
        var btAddNachPtnPrev = Ext.getCmp('btAddNachPtnPrev');


        var btnInsTarifOtoplenie = Ext.getCmp('btnInsTarifOtoplenie');
        var tarif = Ext.getCmp('tarOtoplenie');

        var dt = new Date();
        var lastDay = Ext.Date.getLastDateOfMonth( dt ) ;
        var firstDay = Ext.Date.getFirstDateOfMonth( dt ) ;

        //console.log(selected,index);
        if (selected.length > 0) {
            form.getForm().loadRecord(selected[0]);

            if (Ext.Date.format(Ext.Date.getFirstDateOfMonth(selected[0].data.data), 'Y-m-d') ==
                Ext.Date.format(Ext.Date.getFirstDateOfMonth(form.getForm().findField('data_nach').getValue()), 'Y-m-d')) {
                btAddNachOtoplenie.setDisabled(false);
                btAddPerer.setDisabled(true);
                btnInsTarifOtoplenie.setDisabled(false);
                btAddNachOtopleniePrev.setDisabled(false);
                btAddNachPtn.setDisabled(false);
                btAddNachPtnPrev.setDisabled(false);

                form.getForm().findField('sdata').setValue("0");
                form.getForm().findField('fdata').setValue("0");
                form.getForm().findField('gkal').setValue("");
                form.getForm().findField('info').setValue("");
                form.getForm().findField('ch_otoplenie').setValue("");
                form.getForm().findField('address_ot').clearValue();
                form.getForm().findField('address_do').clearValue();
                form.getForm().findField('allkv').setValue(1);
                viborTarif.clearValue();
                viborTarif.setDisabled(false);



            }else{
                btAddNachOtoplenie.setDisabled(true);
                btAddNachOtopleniePrev.setDisabled(true);
                btAddNachPtn.setDisabled(true);
                btAddNachPtnPrev.setDisabled(true);

                btAddPerer.setDisabled(false);
                form.getForm().findField('sdata').setValue(Ext.Date.format(Ext.Date.getFirstDateOfMonth(selected[0].data.data), 'Y-m-d'));
                form.getForm().findField('fdata').setValue(Ext.Date.format( Ext.Date.getLastDateOfMonth(selected[0].data.data), 'Y-m-d'));
                form.getForm().findField('address_ot').clearValue();
                form.getForm().findField('address_do').clearValue();
                form.getForm().findField('allkv').setValue(1);
                form.getForm().findField('tarif_manual').setValue(0);
                viborTarif.setDisabled(true);
                btnInsTarifOtoplenie.setDisabled(true);
            }
            tarif.setValue(0);


            stAddress.removeAll();
            stAddress.load({
                params: {
                    what:'AddressFromHousesTarif',
                    house_id: selected[0].data.house_id
                },
                callback: function(records,operation,success){
                    if(success){
                        form.getForm().findField('address_ot').setValue(records[0].get('address_id'));
                        form.getForm().findField('address_do').setValue(records[0].get('address_id'));
                    }

                },
                scope:this
            });

        }

    },

    onDelTekPokTeplomeraClick: function(button, e, eOpts) {
        // in use
        var me = this;
        //STORE

        var stUser = Ext.data.StoreManager.get("StUser");
        var stTekPokTeplomera = Ext.data.StoreManager.get("StTekPokTeplomera");//QueryTeplomer.getResults <TekPokTeplomera>
        var stAllPokTeplomera = Ext.data.StoreManager.get("StAllPokTeplomera");//QueryTeplomer.getResults <TekPokTeplomera>

        //LOGIN & PASSWORD

        var values =stUser.getAt(0);
        var params = {
            login:values.get('login'),
            password:values.get('password'),
            address_id:values.get('address_id'),
            house_id:values.get('house_id'),
            what:'ATeplomer'
        };

        //FORMA

        var fmTeplomer = Ext.getCmp('fmAppTeplomer');
        var value = fmTeplomer.getValues();

        //LOGIKA

        Ext.Object.merge(value, params);
        //console.log(value);
        Ext.MessageBox.confirm({
            title: 'Удаление последних показаний счетчика',
            msg: 'Вы удаляете последнее показание по счетчику <br>Показание <b>'+value.tek+
            '</b><br>Подтвердите или отмените свои действия.',
            buttons: Ext.MessageBox.OKCANCEL,
            icon: Ext.MessageBox.ERROR,
            buttonText:{
                ok:'подтвеждаю',
                cancel:'отмена'
            },
            fn:function(btn,newValue){
                if(btn=='ok'){
                    QueryTeplomer.delPokTeplomera(value,function(results){
                        if (results.success){
                            Ext.MessageBox.show({title: 'Удаление последних показаний ',
                                msg: results.msg,
                                buttons: Ext.MessageBox.OK,
                                icon: Ext.MessageBox.INFO
                            });
                            fmTeplomer.down('#newPokAppTepl').setValue(0);

                            stAllPokTeplomera.load({
                                params: {
                                    login:value.login,
                                    password:value.password,
                                    address_id: value.address_id,
                                    what:'AllPokTeplomera',
                                    what_id: value.teplomer_id,
                                    teplomer_id: value.teplomer_id
                                },
                                scope:this
                            });
                            stTekPokTeplomera.load({
                                params: {
                                    what:'TekPokTeplomera',
                                    what_id: value.address_id,
                                    address_id: value.address_id,
                                    teplomer_id: value.teplomer_id,
                                    login:value.login,
                                    password:value.password
                                },
                                callback: function(records,operation,success){

                                    if((success)){
                                        fmTeplomer.getForm().loadRecord(records[0]);
                                    }
                                },
                                scope:this
                            });
                        }else{
                            Ext.MessageBox.show({title: 'Удаление последних показаний счетчика воды',
                                msg: msg,
                                buttons: Ext.MessageBox.OK,
                                icon: Ext.MessageBox.ERROR
                            });
                        }
                    });
                }
            }
        });

    },

    onInsTekPokTeplomerClick: function(button, e, eOpts) {
        // in use
        var me = this;
        //STORE

        var stUser = Ext.data.StoreManager.get("StUser");
        var stTekPokTeplomera = Ext.data.StoreManager.get("StTekPokTeplomera");//QueryTeplomer.getResults <TekPokTeplomera>
        var stAllPokTeplomera = Ext.data.StoreManager.get("StAllPokTeplomera");//QueryTeplomer.getResults <TekPokTeplomera>

        //LOGIN & PASSWORD

        var values =stUser.getAt(0);
        var params = {
            login:values.get('login'),
            password:values.get('password'),
            address_id:values.get('address_id'),
            house_id:values.get('house_id'),
            what:'ATeplomer'
        };
        //FORMA
        var fmTeplomer = Ext.getCmp('fmAppTeplomer');
        var value = fmTeplomer.getValues();
        //LOGIKA


        Ext.Object.merge(value, params);
        var newValue = value.newValue;
        var max =newValue - value.tek;
        if (isNaN(newValue)){
            Ext.MessageBox.show({
                title: 'Проверка вводимых данных',
                msg: 'Введите число',
                buttons: Ext.MessageBox.OK,
                icon: Ext.MessageBox.ERROR
            });
            return false;
        }else if (max<0){
            Ext.MessageBox.show({
                title: 'Проверка вводимых данных',
                msg: 'Текущие показания <b>'+value.tek+'</b><br>Новые показания <b>'+newValue+'</b><br>Введите правильные показания !.',
                buttons: Ext.MessageBox.CANCEL,
                icon: Ext.MessageBox.ERROR,
                buttonText:{
                    cancel:'отмена'
                },
                fn:function(btn,newValue){
                    if(btn=='cancel'){
                        fmTeplomer.down('#newPokAppTepl').focus();
                        return false;
                    }
                }
            });
        } else {
            QueryTeplomer.newPokTeplomera(value,function(data){
                if (data.success){
                    Ext.MessageBox.confirm({
                        title: 'Проверка вводимых данных',
                        msg: 'Новые показания введены',
                        buttons: Ext.MessageBox.OK,
                        icon: Ext.MessageBox.INFO
                    });
                    fmTeplomer.down('#newPokAppTepl').setValue(0);

                    stTekPokTeplomera.load({
                        params: {
                            what:'TekPokTeplomera',
                            what_id: value.address_id,
                            address_id: value.address_id,
                            teplomer_id: value.teplomer_id,
                            login:value.login,
                            password:value.password
                        },
                        callback: function(records,operation,success){
                            if(success){
                                fmTeplomer.getForm().loadRecord(records[0]);
                            }
                        },
                        scope:this
                    });
                    stAllPokTeplomera.load({
                        params: {
                            login:value.login,
                            password:value.password,
                            address_id: value.address_id,
                            what:'AllPokTeplomera',
                            what_id: value.teplomer_id,
                            teplomer_id: value.teplomer_id
                        },
                        scope:this
                    });

                }
            });
        }



    },

    onAddAppTeplomerClick: function(button, e, eOpts) {
          //in use
                var me=this;
                //STORE

                var stUser = Ext.data.StoreManager.get("StUser");
                var StDTeplomerCb = Ext.data.StoreManager.get("StDTeplomerCb");//QueryTeplomer.getResults  <AllPokTeplomera>

                //LOGIN & PASSWORD

                var values =stUser.getAt(0);
                var house_id = values.get('house_id');

                //LOGIKA
                values.set({'vibor':'addAppTeplomer'});
                stUser.sync();

                var dt = new Date();
                var WinAddTeplomer = me.getWinAddTeplomer();
                var form = WinAddTeplomer.down('#fmAddTeplomer');

                /*
                LOGIKA
                */

                StDTeplomerCb.removeAll();
                StDTeplomerCb.load({
                    params: {
                        what_id:house_id,
                        what:'DteplomerHouse'
                    },
                    scope:this
                });
                form.getForm().findField('pdate').setValue(Ext.Date.format(dt, 'Y-m-d'));
                form.getForm().findField('sdate').setValue(Ext.Date.format(dt, 'Y-m-d'));
                WinAddTeplomer.show();


    },

    onNewPokAppTeplSpecialkey: function(field, e, eOpts) {
        var value = field.getValue();
        if (e.getKey() === e.ENTER && !Ext.isEmpty(value)) {
            this.onInsTekPokTeplomerClick();
        }
    },

    onBtAddTeplomerClick: function(button, e, eOpts) {
        // in use
        var me = this;
        //CONTROLLER

        var value = button.findParentByType('form').getValues();
        //STORE

        var stUser = Ext.data.StoreManager.get("StUser");
        var values =stUser.getAt(0);
        var vibor = values.get('vibor');
        this.getWinAddTeplomer().close();
        switch (vibor){

            case 'addAppTeplomer':  // ВЫБРАНА КВАРТИРА
                me.addAppTeplomer(value);
                break;
            case 'editAppTeplomer':// ВЫБРАНА КВАРТИРА  - edit
                me.editAppTeplomer(value);
                break;
            case 'changeAppTeplomer':  // ВЫБРАНА КВАРТИРА
                me.changeAppTeplomer(value);
                break;
        }
    },

    addAppTeplomer: function(value) {
        // in use
        var me = this;

        //STORE
        //teplomers
        var stUser = Ext.data.StoreManager.get("StUser");
        var stTekPokTeplomera = Ext.data.StoreManager.get("StTekPokTeplomera");//QueryTeplomer.getResults <TekPokTeplomera>
        var stAllPokTeplomera = Ext.data.StoreManager.get("StAllPokTeplomera");//QueryTeplomer.getResults <>
        var stTeplomer = Ext.data.StoreManager.get("StTeplomer");//QueryTeplomer.getResults  <AppTeplomer>
        var stTekPokTeplomerov = Ext.data.StoreManager.get("StTekPokTeplomerov");//QueryTeplomer.getResults  <TekPokTeplomerov>
        //var stTekNach = Ext.data.StoreManager.get("StTekNach");//QueryKassa.getResults


        //LOGIN & PASSWORD

        var values =stUser.getAt(0);
        var params = {
            login:values.get('login'),
            password:values.get('password'),
            address_id:values.get('address_id'),
            house_id:values.get('house_id'),
            what:"addAppTeplomer"
        };
        //WIN

        var winAddTeplomer = this.getWinAddTeplomer();

        //GRID

        var grAppTeplomer = Ext.getCmp('grAppTeplomer');
        var grAppHTeplomer = Ext.getCmp('grAppHTeplomer');


        //FORMA

        var fmAppTeplomer = Ext.getCmp('fmAppTeplomer');
        var fmAddTeplomer = Ext.getCmp('fmAddTeplomer');
        //var value = fmAddTeplomer.getValues();

        //LOGIKA

        Ext.Object.merge(value, params);
        //console.log(value);
        QueryTeplomer.addTeplomer(value,function(results){
            if (results.success){
                stTekPokTeplomera.removeAll();
                stTeplomer.removeAll();
                stTekPokTeplomerov.removeAll();

                fmAppTeplomer.getForm().findField('newValue').setValue(0);
                stTeplomer.load({
                    params: {
                        what:'AppTeplomer',
                        address_id: value.address_id,
                        teplomer_id: results.teplomer_id,
                        login:value.login,
                        password:value.password
                    },
                    scope:this
                });
                stTekPokTeplomerov.load({
                    params: {
                        what:'AllPokTeplomera',
                        address_id: value.address_id,
                        teplomer_id: results.teplomer_id,
                        login:value.login,
                        password:value.password
                    },
                    scope:this
                });
                stTekPokTeplomera.load({
                    params: {
                        what:'TekPokTeplomera',
                        address_id: value.address_id,
                        teplomer_id: results.teplomer_id,
                        login:value.login,
                        password:value.password
                    },
                    callback: function(records,operation,success){
                        if(success){
                            fmAppTeplomer.getForm().loadRecord(records[0]);
                        }
                    },
                    scope:this
                });



                stAllPokTeplomera.load({
                    params: {
                        login:value.login,
                        password:value.password,
                        address_id: value.address_id,
                        what:'AllPokTeplomera',
                        what_id: results.teplomer_id,
                        teplomer_id: results.teplomer_id
                        //nomer: selections[0].data.nomer
                    },
                    scope:this
                });



                winAddTeplomer.close();

                setTimeout(function(){
                    var first = stTeplomer.getAt(0);
                    if (first) {
                        grAppTeplomer.getView().getSelectionModel().select(first);
                    }
                }, 500);
            }
        });
    },

    editAppTeplomer: function(value) {
        // in use
        var me = this;
        //STORE
        var stUser = Ext.data.StoreManager.get("StUser");
        var StATeplomer = Ext.data.StoreManager.get("StTeplomer");//QueryTeplomer.getResults  <OrgTeplomer>
        //LOGIN & PASSWORD

        var values =stUser.getAt(0);
        var params = {
            login:values.get('login'),
            password:values.get('password'),
            org_id:values.get('org_id'),
            address_id:values.get('address_id'),
            address:values.get('address'),
            rowind:values.get('rowind'),
            what:"editAppTeplomer"
        };

        //GRID
        var grAppTeplomer = Ext.getCmp('grAppTeplomer');
        //LOGIKA

        Ext.Object.merge(value, params);
        QueryTeplomer.addTeplomer(value,function(results){
            if (results.success){
                StATeplomer.load({
                    params: {
                        what:'AppTeplomer',
                        address_id: value.address_id,
                        teplomer_id: value.teplomer_id,
                        login:value.login,
                        password:value.password
                    },
                    callback: function(records,operation,success){
                        if(success){
                            grAppTeplomer.getView().getSelectionModel().select(value.rowind);
                            Ext.MessageBox.show({
                                title: 'Обновление данных по тепломеру',
                                msg: results.msg,
                                buttons: Ext.MessageBox.OK,
                                icon: Ext.MessageBox.INFO
                            });
                        }
                    },
                    scope:this
                });

            }
        });

    },

    changeAppTeplomer: function(value) {
        // in use
        var me = this;
        //STORE
        var stUser = Ext.data.StoreManager.get("StUser");
        var StTeplomer = Ext.data.StoreManager.get("StTeplomer");//QueryTeplomer.getResults  <OrgTeplomer>
        //LOGIN & PASSWORD

        var values =stUser.getAt(0);
        var params = {
            login:values.get('login'),
            password:values.get('password'),
            org_id:values.get('org_id'),
            address_id:values.get('address_id'),
            address:values.get('address'),
            rowind:values.get('rowind'),
            what:"changeAppTeplomer"
        };

        //GRID
        var grAppTeplomer = Ext.getCmp('grAppTeplomer');
        //LOGIKA

        Ext.Object.merge(value, params);
        QueryTeplomer.addTeplomer(value,function(results){
            if (results.success){
                StTeplomer.load({
                    params: {
                        what:'AppTeplomer',
                        address_id: value.address_id,
                        teplomer_id: value.teplomer_id,
                        login:value.login,
                        password:value.password
                    },
                    callback: function(records,operation,success){
                        if(success){
                            grAppTeplomer.getView().getSelectionModel().select(value.rowind);
                            Ext.MessageBox.show({
                                title: 'Замена тепломера',
                                msg: results.msg,
                                buttons: Ext.MessageBox.OK,
                                icon: Ext.MessageBox.INFO
                            });
                        }
                    },
                    scope:this
                });

            }
        });

    }

});
