/*
 * File: app/controller/AppEnergy.js
 *
 * This file was generated by Sencha Architect version 3.2.0.
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 5.1.x library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 5.1.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('Osbb.controller.AppEnergy', {
    extend: 'Ext.app.Controller',

    refs: {
        WinAddEnergomer: '#winAddEnergomer'
    },

    control: {
        "#tabEnergy": {
            activate: 'onTabEnergyActivate'
        },
        "#tabAppEnergomer": {
            activate: 'onTabAppEnergomerActivate'
        },
        "#addAppEnergomer": {
            click: 'onAddAppEnergomerClick'
        },
        "#btAddEnergomer": {
            click: 'onBtAddEnergomerClick'
        },
        "#delTekPokEnergomer": {
            click: 'onDelTekPokEnergomerClick'
        },
        "#AddMeedlePokEnergomera": {
            click: 'onAddMeedlePokEnergomeraClick'
        },
        "#insMeedlePokEnergomera": {
            click: 'onInsMeedlePokEnergomeraClick'
        },
        "#insTekPokEnergomera": {
            click: 'onInsTekPokEnergomeraClick'
        },
        "#grAppEnergomer": {
            selectionchange: 'onGrAppEnergomerSelectionChange'
        },
        "#grAllPokEnergomer": {
            selectionchange: 'onGrAllPokEnergomerSelectionChange'
        },
        "#grTarifHousesEnergy": {
            selectionchange: 'onGrTarifHousesEnergySelectionChange'
        },
        "#grAppHEnergomer": {
            selectionchange: 'onGrAppHEnergomerSelectionChange'
        },
        "#btAddNachEnergy": {
            click: 'onBtAddNachEnergyClick'
        },
        "#btAddNachEnergyPrev": {
            click: 'onBtAddNachEnergyPrevClick'
        }
    },

    onTabEnergyActivate: function(component, eOpts) {
        //STORE
        var form = Ext.getCmp('fmEnergy');
        var btAddNach = Ext.getCmp('btAddNachEnergy');
        //var btAddPerer = Ext.getCmp('btAddPererEnergy');
        //var pnPerer = Ext.getCmp('pnPererEnergy');
        var grid = Ext.getCmp('grTarifHousesEnergy');
        var store = grid.getStore();
        store.removeAll();
        var dt = new Date();
        var firstDay = Ext.Date.getFirstDateOfMonth( dt ) ;
        form.getForm().reset();
        form.getForm().findField('data_nach').setValue(firstDay);
        btAddNach.setText("Начислить электроэнергию за период   "+ Ext.Date.format(firstDay, 'F,Y'));
        //btAddPerer.setText("Перерасчитать электроэнергию за период  "+ Ext.Date.format(firstDay, 'F,Y'));
        //pnPerer.setTitle("Перерасчет электроэнергию за период "+ Ext.Date.format(firstDay, 'F,Y'));

    },

    onTabAppEnergomerActivate: function(component, eOpts) {
        //in use
        //STORE

        var stUser = Ext.data.StoreManager.get("StUser");

        //LOGIN & PASSWORD

        var values =stUser.getAt(0);
        var login = values.get('login');
        var password = values.get('password');
        var address_id = values.get('address_id');
        var address = values.get('address');
        var house_id = values.get('house_id');
        var prixod_id = values.get('prixod_id');

        var fmEnergomer = Ext.getCmp('fmEnergomer');


        //STORE
        var StEnergomer = Ext.data.StoreManager.get("StEnergomer");//QueryVodomer.getResults  <AppVodomer>
        var StHEnergomer = Ext.data.StoreManager.get("StHEnergomer");//QueryVodomer.getResults <AppHVodomer>
        var StPEnergomer = Ext.data.StoreManager.get("StPEnergomer");//QueryTeplomer.getResults <AppHTeplomer>
        StPEnergomer.removeAll();

        //grAllPokVodomera.getView().refresh();

        //showAddressAppVodomer.setText(address).show();
        fmEnergomer.getForm().reset();
        StEnergomer.load({
            params: {
                what:'AppEnergomer',
                what_id: address_id,
                address_id: address_id,
                login:login,
                password:password
            },
            scope:this
        });

        StHEnergomer.load({
            params: {
                what:'AppHEnergomer',
                what_id: address_id,
                address_id: address_id,
                login:login,
                password:password
            },
            scope:this
        });

    },

    onAddAppEnergomerClick: function(button, e, eOpts) {
        //in use
        var me=this;
        /*
        COMPONENT
        */
        var winAddEnergomer = Ext.ClassManager.instantiateByAlias('widget.winaddenergomer');
        /*
        LOGIKA
        */
        var dt = new Date();

        var form = winAddEnergomer.down('#fmAddEnergomer');
        var check = form.down('#chkExistentEnergomer');
        var jointVodomer = form.down('#jointEnergomer');
        var stUser = Ext.data.StoreManager.get("StUser");
        var values =stUser.getAt(0);

        //LOGIKA'
        values.set({'vibor':'addAppEnergomer'});
        stUser.sync();
        form.down('#btAddEnergomer').setText('Добавить прибор');
        form.getForm().findField('pdate').setValue(Ext.Date.format(dt, 'Y-m-d'));
        form.getForm().findField('sdate').setValue(Ext.Date.format(dt, 'Y-m-d'));
        form.getForm().findField('new_address_id').setValue(values.get('address_id'));

        form.getForm().findField('address_id').hide();
        form.getForm().findField('new_address_id').hide();
        winAddEnergomer.setTitle('Добовление прибора учета');
        winAddEnergomer.show();
    },

    onBtAddEnergomerClick: function(button, e, eOpts) {
        // in use
        var me = this;
        //CONTROLLER

        var value = button.findParentByType('form').getValues();
        //STORE

        var stUser = Ext.data.StoreManager.get("StUser");
        var values =stUser.getAt(0);
        var vibor = values.get('vibor');
        this.getWinAddEnergomer().close();
        switch (vibor){
            case 'addAppEnergomer':  // ВЫБРАНА КВАРТИРА
                me.addEnergomerApp(value);
                break;
            case 'editAppEnergomer':  // ВЫБРАНА КВАРТИРА
                me.editEnergomerApp(value);
                break;
            case 'changeAppEnergomer':  // ВЫБРАНА КВАРТИРА
                me.changeEnergomerApp(value);
                break;

        }
    },

    onDelTekPokEnergomerClick: function(button, e, eOpts) {
        // in use
        var me = this;
        //STORE

        var stUser = Ext.data.StoreManager.get("StUser");
        var StPPribora = Ext.data.StoreManager.get("StPEnergomer");//QueryVodomer.getResults  <AllPokVodomera>
        var StTekPokPribora = Ext.data.StoreManager.get("StTekPokEnergomerov");//QueryVodomer.getResults <TekPokVodomera>



        var values =stUser.getAt(0);
        var params = {
            login:values.get('login'),
            password:values.get('password'),
            address_id:values.get('address_id'),
            house_id:values.get('house_id'),
            what:'AEnergomer'

        };
        //GRID

        //var grTekNachAppVodomer = Ext.getCmp('grTekNachAppVodomer');

        //FORMA

        var delBtn = Ext.getCmp('delTekPokEnergomer');
        var vklDelPokEn = Ext.getCmp('vklDelPokEn');

        delBtn.setDisabled(true);
        vklDelPokEn.setValue(0);



        var fmPribor = Ext.getCmp('fmEnergomer');
        var value = fmPribor.getValues();

        //LOGIKA

        Ext.Object.merge(value, params);
        //console.log(value);
        Ext.MessageBox.confirm({
            title: 'Удаление последних показаний счетчика',
            msg: 'Вы удаляете последнее показание по счетчику <br>Показание<b>'+value.tek+'</b><br>Подтвердите или отмените свои действия.',
            buttons: Ext.MessageBox.OKCANCEL,
            icon: Ext.MessageBox.ERROR,
            buttonText:{
                ok:'подтвеждаю',
                cancel:'отмена'
            },
            fn:function(btn,newValue){
                if(btn=='ok'){
                    QueryEnergomer.delPokEnergomera(value,function(results){
                        if (results.success){
                            Ext.MessageBox.show({title: 'Удаление последних показаний ',
                                msg: results.msg,
                                buttons: Ext.MessageBox.OK,
                                icon: Ext.MessageBox.INFO
                            });
                            fmPribor.getForm().findField('newValue').setValue(0);
                            StPPribora.load({
                                params: {
                                    what:'AllPokEnergomera',
                                    what_id: value.address_id,
                                    address_id: value.address_id,
                                    energomer_id: value.energomer_id,
                                    login:value.login,
                                    password:value.password
                                },
                                scope:this
                            });

                            StTekPokPribora.load({
                                params: {
                                    what:'TekPokEnergomera',
                                    what_id: value.address_id,
                                    address_id: value.address_id,
                                    energomer_id: value.energomer_id,
                                    login:value.login,
                                    password:value.password
                                },
                                callback: function(records,operation,success){
                                    if(success){
                                        fmPribor.getForm().loadRecord(records[0]);
                                    }
                                },
                                scope:this
                            });

                        }else{
                            Ext.MessageBox.show({title: 'Удаление последних показаний счетчика',
                                msg: results.msg,
                                buttons: Ext.MessageBox.OK,
                                icon: Ext.MessageBox.ERROR
                            });
                        }
                    });
                }
            }
        });

    },

    onAddMeedlePokEnergomeraClick: function(button, e, eOpts) {
        // in use
        //var me = this;
        //STORE

        var stUser = Ext.data.StoreManager.get("StUser");
        //LOGIN & PASSWORD
        var fmPribor = Ext.getCmp('fmEnergomer');
        var insMeedlePok = fmPribor.down('#insMeedlePokEnergomera');
        var date_st = fmPribor.getForm().findField('date_st');
        var date_fin = fmPribor.getForm().findField('date_fin');
        var mday = fmPribor.getForm().findField('mday');
        var pok_ot = fmPribor.getForm().findField('pok_ot');
        var pok_do = fmPribor.getForm().findField('pok_do');
        var rday = fmPribor.getForm().findField('rday');
        var kub_day = fmPribor.getForm().findField('kwh_day');
        var newKubov = fmPribor.getForm().findField('newKwh');
        var qty_kub = fmPribor.getForm().findField('qty_kwh');

        var value = fmPribor.getValues();


        var values =stUser.getAt(0);
        var params = {
            login:values.get('login'),
            password:values.get('password'),
            address_id:values.get('address_id'),
            address:values.get('address'),
            what:"AddMeedlePokEnergomera"
        };
        Ext.Object.merge(value, params);
        QueryEnergomer.updateEnergomer(value,function(results){
            if (results.success){

                insMeedlePok.setDisabled(false);
                date_st.setDisabled(false);
                date_fin.setDisabled(false);
                pok_do.setDisabled(false);
                pok_ot.setDisabled(false);
                mday.setDisabled(false);
                rday.setDisabled(false);
                kub_day.setDisabled(false);
                newKubov.setDisabled(false);
                qty_kub.setDisabled(false);

                insMeedlePok.setDisabled(false);
                date_st.setValue(results.date_st);
                date_fin.setValue(results.date_fin);
                pok_ot.setValue(results.pok_ot);
                pok_do.setValue(results.pok_do);
                rday.setValue(results.rday);
                kub_day.setValue(results.kwh_day);
                mday.setValue(results.mday);
                qty_kub.setValue(results.qty_kwh);
                newKubov.setValue(results.kwh);
            } else {
                Ext.MessageBox.show({
                    title: 'Обновление прибора учета',
                    msg: results.msg,
                    buttons: Ext.MessageBox.OK,
                    icon: Ext.MessageBox.INFO
                });
            }
        });

    },

    onInsMeedlePokEnergomeraClick: function(button, e, eOpts) {

    },

    onInsTekPokEnergomeraClick: function(button, e, eOpts) {
        // in use
        var me = this;
        //STORE

        var stUser = Ext.data.StoreManager.get("StUser");
        var stPPribora = Ext.data.StoreManager.get("StPEnergomer");//QueryVodomer.getResults  <AppVodomer>
        var stTekPokPribora = Ext.data.StoreManager.get("StTekPokEnergomerov");//QueryVodomer.getResults <TekPokVodomera>
        //LOGIN & PASSWORD

        var values =stUser.getAt(0);
        var params = {
            login:values.get('login'),
            password:values.get('password'),
            address_id:values.get('address_id'),
            house_id:values.get('house_id'),
            what:'AEnergomer'

        };
        //GRID

        //var grTekNachAppVodomer = Ext.getCmp('grTekNachAppVodomer');

        //FORMA

        var fmPribor = Ext.getCmp('fmEnergomer');
        var value = fmPribor.getValues();

        //LOGIKA

        Ext.Object.merge(value, params);
        var newValue = value.newValue;
        var max =newValue - value.tek;
        if (isNaN(newValue)){
            Ext.MessageBox.show({
                title: 'Проверка вводимых данных',
                msg: 'Введите число',
                buttons: Ext.MessageBox.OK,
                icon: Ext.MessageBox.ERROR
            });
            return false;
        }else if (max < 0){
            Ext.MessageBox.show({
                title: 'Проверка вводимых данных',
                msg: 'Текущие показания <b>'+value.tek+'</b><br>Новые показания <b>'+newValue+'</b><br>Введите правильные показания !.',
                buttons: Ext.MessageBox.CANCEL,
                icon: Ext.MessageBox.ERROR,
                buttonText:{
                    cancel:'отмена'
                },
                fn:function(btn,newValue){
                    if(btn=='cancel'){
                        fmPribor.getForm().findField('newValue').focus();
                        return false;
                    }
                }
            });
        } else if(max === 0) {
            Ext.MessageBox.confirm({
                title: 'Проверка вводимых данных',
                msg: 'Вводимые показания теже что и предыдущие<br>Подтвердите или отмените вводимые показания.',
                buttons: Ext.MessageBox.OKCANCEL,
                icon: Ext.MessageBox.ERROR,
                buttonText:{
                    ok:'подтвеждаю',
                    cancel:'отмена'
                },
                fn:function(btn,newValue){
                    if(btn=='cancel'){
                        fmPribor.getForm().findField('newValue').focus();
                        return false;
                    }else{
                        QueryEnergomer.newPokEnergomer(value,function(results){
                            if (results.success){

                                fmPribor.getForm().findField('newValue').setValue(0);
                                stPPribora.load({
                                    params: {
                                        what:'AllPokEnergomera',
                                        what_id: value.address_id,
                                        address_id: value.address_id,
                                        energomer_id: value.energomer_id,
                                        login:value.login,
                                        password:value.password
                                    },
                                    scope:this
                                });
                                stTekPokPribora.load({
                                    params: {
                                        what:'TekPokEnergomera',
                                        what_id: value.address_id,
                                        address_id: value.address_id,
                                        energomer_id: value.energomer_id,
                                        login:value.login,
                                        password:value.password
                                    },
                                    callback: function(records,operation,success){
                                        if(success){
                                            fmVodomer.getForm().loadRecord(records[0]);
                                        }
                                    },
                                    scope:this
                                });
                            }
                        });
                    }
                }
            });
        } else if(max > 500) {
            Ext.MessageBox.confirm({
                title: 'Проверка вводимых данных',
                msg: 'Вводимые показания <b>'+newValue+'</b> очень большие <b>'+ max +'</b> кВт-час<br>Подтвердите или отмените вводимые показания.',
                buttons: Ext.MessageBox.OKCANCEL,
                icon: Ext.MessageBox.ERROR,
                buttonText:{
                    ok:'подтвеждаю',
                    cancel:'отмена'
                },
                fn:function(btn,newValue){
                    if(btn=='cancel'){
                        fmPribor.getForm().findField('newValue').focus();
                        return false;
                    }else{
                        QueryEnergomer.newPokEnergomer(value,function(results){
                            if (results.success){

                                fmPribor.getForm().findField('newValue').setValue(0);
                                stPPribora.load({
                                    params: {
                                        what:'AllPokEnergomera',
                                        what_id: value.address_id,
                                        address_id: value.address_id,
                                        energomer_id: value.energomer_id,
                                        login:value.login,
                                        password:value.password
                                    },
                                    scope:this
                                });
                                stTekPokPribora.load({
                                    params: {
                                        what:'TekPokEnergomera',
                                        what_id: value.address_id,
                                        address_id: value.address_id,
                                        energomer_id: value.energomer_id,
                                        login:value.login,
                                        password:value.password
                                    },
                                    callback: function(records,operation,success){
                                        if(success){
                                            fmPribor.getForm().loadRecord(records[0]);
                                        }
                                    },
                                    scope:this
                                });
                            }
                        });
                    }
                }
            });


        } else {
            QueryEnergomer.newPokEnergomer(value,function(results){
                if (results.success){

                    fmPribor.getForm().findField('newValue').setValue(0);
                    stPPribora.load({
                        params: {
                            what:'AllPokEnergomera',
                            what_id: value.address_id,
                            address_id: value.address_id,
                            energomer_id: value.energomer_id,
                            login:value.login,
                            password:value.password
                        },
                        scope:this
                    });

                    stTekPokPribora.load({
                        params: {
                            what:'TekPokEnergomera',
                            what_id: value.address_id,
                            address_id: value.address_id,
                            energomer_id: value.energomer_id,
                            login:value.login,
                            password:value.password
                        },
                        callback: function(records,operation,success){
                            if(success){
                                fmPribor.getForm().loadRecord(records[0]);
                            }
                        },
                        scope:this
                    });

                }
            });
        }

    },

    onGrAppEnergomerSelectionChange: function(model, selected, eOpts) {
        //in use
        var me =this;

        //STORE

        var stUser = Ext.data.StoreManager.get("StUser");
        var StPPribora = Ext.data.StoreManager.get("StPEnergomer");//QueryVodomer.getResults  <AllPokVodomera>
        var StTekPokPribora = Ext.data.StoreManager.get("StTekPokEnergomerov");//QueryVodomer.getResults <TekPokVodomera>

        //LOGIN & PASSWORD

        var values =stUser.getAt(0);
        var login = values.get('login');
        var password = values.get('password');
        var address_id = values.get('address_id');
        var house_id = values.get('house_id');

        //GRID

        var grAppHVodomer = Ext.getCmp('grAppHEnergomer');

        //FORMA

        var fmPribor = Ext.getCmp('fmEnergomer');

        //var fs = fmVodomer.down('#fsInsPokVodMiddle');
        //var btnHand = fmVodomer.down('#insHandPokVod');
        var btnNorm = fmPribor.down('#insTekPokEnergomera');
        var tekValue = fmPribor.getForm().findField('tekp');
        var newValue = fmPribor.getForm().findField('newValue');

        var AddMeedlePokVod = fmPribor.down('#AddMeedlePokEnergomera');
        var insMeedlePokVod = fmPribor.down('#insMeedlePokEnergomera');
        var date_st = fmPribor.getForm().findField('date_st');
        var date_fin = fmPribor.getForm().findField('date_fin');
        var date_ao = fmPribor.getForm().findField('date_ao');
        var date_ar = fmPribor.getForm().findField('date_ar');
        var pok_ot = fmPribor.getForm().findField('pok_ot');
        var pok_do = fmPribor.getForm().findField('pok_do');
        var rday = fmPribor.getForm().findField('rday');
        var mday = fmPribor.getForm().findField('mday');
        var kub_day = fmPribor.getForm().findField('kwh_day');
        var qty_kub = fmPribor.getForm().findField('qty_kwh');

        var newKubov = fmPribor.getForm().findField('newKwh');


        //LOGIKA

        grAppHVodomer.getView().getSelectionModel().deselectAll();

        if (selected.length){
            StPPribora.load({
                params: {
                    login:login,
                    password:password,
                    address_id: address_id,
                    what:'AllPokEnergomera',
                    what_id: selected[0].data.address_id,
                    energomer_id: selected[0].data.energomer_id
                },
                scope:this
            });
            fmPribor.down('#delTekPokEnergomer').setDisabled(true);
            fmPribor.getForm().findField('vkl_del').setValue(0);
            StTekPokPribora.load({
                params: {
                    login:login,
                    password:password,
                    address_id: address_id,
                    what:'TekPokEnergomera',
                    what_id: selected[0].data.address_id,
                    energomer_id: selected[0].data.energomer_id
                },
                callback: function(records,operation,success){
                    if(success){
                        fmPribor.getForm().loadRecord(records[0]);

                    }
                },
                scope:this
            });
            if (selected[0].data.out===1){
                AddMeedlePokVod.setDisabled(true);
                insMeedlePokVod.setDisabled(true);
                date_ao.setDisabled(false);
                date_ar.setDisabled(false);
                date_st.setDisabled(true);
                date_fin.setDisabled(true);
                qty_kub.setDisabled(true);
                pok_do.setDisabled(true);
                pok_ot.setDisabled(true);
                rday.setDisabled(true);
                mday.setDisabled(true);
                qty_kub.setDisabled(true);
                kub_day.setDisabled(true);
                newKubov.setDisabled(true);
                btnNorm.setDisabled(true);
                newValue.setDisabled(true);

            } else {
                AddMeedlePokVod.setDisabled(true);
                insMeedlePokVod.setDisabled(true);
                date_ao.setDisabled(true);
                date_ar.setDisabled(true);
                date_st.setDisabled(true);
                date_fin.setDisabled(true);
                pok_do.setDisabled(true);
                pok_ot.setDisabled(true);
                mday.setDisabled(true);
                rday.setDisabled(true);
                qty_kub.setDisabled(true);
                kub_day.setDisabled(true);
                newKubov.setDisabled(true);
                btnNorm.setDisabled(false);
                newValue.setDisabled(false);
            }
        }

    },

    onGrAllPokEnergomerSelectionChange: function(model, selected, eOpts) {
        //in use
        var me =this;

        //STORE

        var stUser = Ext.data.StoreManager.get("StUser");
        var stTekPokPribora = Ext.data.StoreManager.get("StTekPokEnergomerov");//QueryVodomer.getResults <TekPokVodomera>

        //LOGIN & PASSWORD

        var values =stUser.getAt(0);
        var login = values.get('login');
        var password = values.get('password');
        var address_id = values.get('address_id');
        var house_id = values.get('house_id');

        //GRID


        //FORMA

        var fmVodomer = Ext.getCmp('fmEnergomer');
        var grAppPribor = Ext.getCmp('grAppEnergomer');


        var btnNorm = fmVodomer.down('#insTekPokEnergomera');
        var tekValue = fmVodomer.getForm().findField('tekp');
        var newValue = fmVodomer.getForm().findField('newValue');

        var AddMeedlePokVod = fmVodomer.down('#AddMeedlePokEnergomera');
        var insMeedlePokVod = fmVodomer.down('#insMeedlePokEnergomera');
        var date_st = fmVodomer.getForm().findField('date_st');
        var date_fin = fmVodomer.getForm().findField('date_fin');
        var date_ao = fmVodomer.getForm().findField('date_ao');
        var date_ar = fmVodomer.getForm().findField('date_ar');
        var pok_ot = fmVodomer.getForm().findField('pok_ot');
        var pok_do = fmVodomer.getForm().findField('pok_do');
        var rday = fmVodomer.getForm().findField('rday');
        var mday = fmVodomer.getForm().findField('mday');
        var kub_day = fmVodomer.getForm().findField('kwh_day');
        var qty_kub = fmVodomer.getForm().findField('qty_kwh');

        var newKubov = fmVodomer.getForm().findField('newKwh');
        grAppPribor.getView().getSelectionModel().deselectAll();



        //LOGIKA


        if (selected.length){

            stTekPokPribora.load({
                params: {
                    login:login,
                    password:password,
                    address_id: address_id,
                    what:'TekPokEnergomera',
                    what_id: selected[0].data.address_id,
                    pok_id: selected[0].data.pok_id,
                    energomer_id: selected[0].data.energomer_id
                },
                callback: function(records,operation,success){
                    if(success){
                        fmVodomer.getForm().loadRecord(records[0]);

                    }
                },
                scope:this
            });
            if (selected[0].data.pok_ot!==0){
                AddMeedlePokVod.setDisabled(true);
                insMeedlePokVod.setDisabled(true);
                date_ao.setDisabled(false);
                date_ar.setDisabled(false);
                date_st.setDisabled(false);
                date_fin.setDisabled(false);
                qty_kub.setDisabled(false);
                pok_do.setDisabled(false);
                pok_ot.setDisabled(false);
                rday.setDisabled(false);
                mday.setDisabled(false);
                qty_kub.setDisabled(false);
                kub_day.setDisabled(false);
                newKubov.setDisabled(true);
                btnNorm.setDisabled(true);
                newValue.setDisabled(true);

            } else {
                AddMeedlePokVod.setDisabled(true);
                insMeedlePokVod.setDisabled(true);
                date_ao.setDisabled(true);
                date_ar.setDisabled(true);
                date_st.setDisabled(true);
                date_fin.setDisabled(true);
                pok_do.setDisabled(true);
                pok_ot.setDisabled(true);
                mday.setDisabled(true);
                rday.setDisabled(true);
                qty_kub.setDisabled(true);
                kub_day.setDisabled(true);
                newKubov.setDisabled(true);
                btnNorm.setDisabled(true);
                newValue.setDisabled(true);
            }
        }

    },

    onGrTarifHousesEnergySelectionChange: function(model, selected, eOpts) {
        //STORE

        var stAddress = Ext.data.StoreManager.get('StAddressOrg');
        var form = Ext.getCmp('fmEnergy');
        var btAddPerer = Ext.getCmp('btAddPererEnergy');
        var viborTarif = Ext.getCmp('cbTarifEnergy');
        var btAddNachEnergy = Ext.getCmp('btAddNachEnergy');
        var btAddNachEnergyPrev = Ext.getCmp('btAddNachEnergyPrev');
        var btnInsTarifEnergy = Ext.getCmp('btnInsTarifEnergy');
        var tarif = Ext.getCmp('tarEnergy');

        var dt = new Date();
        var lastDay = Ext.Date.getLastDateOfMonth( dt ) ;
        var firstDay = Ext.Date.getFirstDateOfMonth( dt ) ;

        //console.log(selected,index);
        if (selected.length > 0) {
            form.getForm().loadRecord(selected[0]);

            if (Ext.Date.format(Ext.Date.getFirstDateOfMonth(selected[0].data.data), 'Y-m-d') ==
                Ext.Date.format(Ext.Date.getFirstDateOfMonth(form.getForm().findField('data_nach').getValue()), 'Y-m-d')) {
                btAddNachEnergy.setDisabled(false);
                btAddNachEnergyPrev.setDisabled(false);
                btAddPerer.setDisabled(true);
                btnInsTarifEnergy.setDisabled(false);

                form.getForm().findField('sdata').setValue("0");
                form.getForm().findField('fdata').setValue("0");
                form.getForm().findField('energy').setValue("");
                form.getForm().findField('info').setValue("");
                form.getForm().findField('ch_energy').setValue("");
                form.getForm().findField('address_ot').clearValue();
                form.getForm().findField('address_do').clearValue();
                form.getForm().findField('allkv').setValue(1);
                viborTarif.clearValue();
                viborTarif.setDisabled(false);



            }else{
                btAddNachEnergy.setDisabled(true);
                btAddNachEnergyPrev.setDisabled(true);
                btAddPerer.setDisabled(false);
                form.getForm().findField('sdata').setValue(Ext.Date.format(Ext.Date.getFirstDateOfMonth(selected[0].data.data), 'Y-m-d'));
                form.getForm().findField('fdata').setValue(Ext.Date.format( Ext.Date.getLastDateOfMonth(selected[0].data.data), 'Y-m-d'));
                form.getForm().findField('address_ot').clearValue();
                form.getForm().findField('address_do').clearValue();
                form.getForm().findField('allkv').setValue(1);
                form.getForm().findField('tarif_manual').setValue(0);
                viborTarif.setDisabled(true);
                btnInsTarifEnergy.setDisabled(true);
            }
            tarif.setValue(0);


            stAddress.removeAll();
            stAddress.load({
                params: {
                    what:'AddressFromHousesTarif',
                    house_id: selected[0].data.house_id
                },
                callback: function(records,operation,success){
                    if(success){
                        form.getForm().findField('address_ot').setValue(records[0].get('address_id'));
                        form.getForm().findField('address_do').setValue(records[0].get('address_id'));
                    }

                },
                scope:this
            });

        }

    },

    onGrAppHEnergomerSelectionChange: function(model, selected, eOpts) {
        //in use
        var me =this;

        //STORE

        var stUser = Ext.data.StoreManager.get("StUser");
        var stPPribor = Ext.data.StoreManager.get("StPEnergomer");//QueryVodomer.getResults  <AllPokVodomera>
        var stTekPokPribora = Ext.data.StoreManager.get("StTekPokEnergomerov");//QueryVodomer.getResults <TekPokVodomera>

        //LOGIN & PASSWORD

        var values =stUser.getAt(0);
        var login = values.get('login');
        var password = values.get('password');
        var address_id = values.get('address_id');
        var house_id = values.get('house_id');

        //GRID

        var grAppPribor = Ext.getCmp('grAppEnergomer');

        //FORMA

        var fmPribor = Ext.getCmp('fmEnergomer');

        //LOGIKA

        grAppPribor.getView().getSelectionModel().deselectAll();

        if (selected.length){
            stTekPokPribora.removeAll();

            stPPribor.load({
                params: {
                    login:login,
                    password:password,
                    address_id: address_id,
                    what:'AllPokEnergomera',
                    what_id: selected[0].data.address_id,
                    energomer_id: selected[0].data.energomer_id
                },
                scope:this
            });
            fmPribor.getForm().reset();

        }

    },

    onBtAddNachEnergyClick: function(button, e, eOpts) {
        // in use
        var me = this;
        //STORE
        var stUser = Ext.data.StoreManager.get("StUser");
        var grid =  Ext.getCmp('grTarifHousesEnergy');

        var getRowSelection = grid.getSelectionModel().getSelection()[0];
        var house_id = getRowSelection.get('house_id');
        //LOGIN & PASSWORD
        var values =stUser.getAt(0);
        var params = {
            login:values.get('login'),
            password:values.get('password'),
            what:"nachislenie_energy_now",
            house_id:house_id
        };


        //LOGIKA

        var myMask= Ext.Msg.show({
            title:'Начисление...',
            msg: 'Начисление услуги.Ожидайте...',
            buttons: Ext.Msg.CANCEL,
            wait: true,
            modal: true,
            icon: Ext.Msg.INFO
        });

        QueryAddress.updateRecords(params,function(results){
            if(results.success==="1"){
                myMask.close();
                Ext.MessageBox.show({
                    title: 'Начисление услуги',
                    msg: results.msg,
                    buttons: Ext.MessageBox.OK,
                    icon: Ext.MessageBox.INFO
                });
            } else {
                myMask.close();
                Ext.MessageBox.show({
                    title: 'Начисление услуги',
                    msg: results.msg,
                    buttons: Ext.MessageBox.OK,
                    icon: Ext.MessageBox.ERROR
                });
            }

        });
    },

    onBtAddNachEnergyPrevClick: function(button, e, eOpts) {
        // in use
        var me = this;
        //STORE
        var stUser = Ext.data.StoreManager.get("StUser");
        var grid =  Ext.getCmp('grTarifHousesEnergy');

        var getRowSelection = grid.getSelectionModel().getSelection()[0];
        var house_id = getRowSelection.get('house_id');
        //LOGIN & PASSWORD
        var values =stUser.getAt(0);
        var params = {
            login:values.get('login'),
            password:values.get('password'),
            what:"nachislenie_energy_prev",
            house_id:house_id
        };


        //LOGIKA

        var myMask= Ext.Msg.show({
            title:'Начисление...',
            msg: 'Начисление услуги.Ожидайте...',
            buttons: Ext.Msg.CANCEL,
            wait: true,
            modal: true,
            icon: Ext.Msg.INFO
        });

        QueryAddress.updateRecords(params,function(results){
            if(results.success==="1"){
                myMask.close();
                Ext.MessageBox.show({
                    title: 'Начисление услуги',
                    msg: results.msg,
                    buttons: Ext.MessageBox.OK,
                    icon: Ext.MessageBox.INFO
                });
            } else {
                myMask.close();
                Ext.MessageBox.show({
                    title: 'Начисление услуги',
                    msg: results.msg,
                    buttons: Ext.MessageBox.OK,
                    icon: Ext.MessageBox.ERROR
                });
            }

        });
    },

    addEnergomerApp: function(value) {
        // in use
        var me = this;
        //STORE
        var stUser = Ext.data.StoreManager.get("StUser");
        var StEnergomer = Ext.data.StoreManager.get("StEnergomer");
        //LOGIN & PASSWORD
        var values =stUser.getAt(0);
        var params = {
            login:values.get('login'),
            password:values.get('password'),
            address_id:values.get('address_id'),
            house_id:values.get('house_id'),
            address:values.get('address'),
            what:"addAppEnergomer"
        };

        //GRID
        var grAppEnergomer= Ext.getCmp('grAppEnergomer');
        //LOGIKA

        Ext.Object.merge(value, params);
        QueryEnergomer.addEnergomer(value,function(results){
            if (results.success){
                StEnergomer.load({
                    params: {
                        what:'AppEnergomer',
                        address_id: value.address_id,
                        energomer_id: value.energomer_id,
                        login:value.login,
                        password:value.password
                    },
                    callback: function(records,operation,success){
                        if(success){
                            grAppEnergomer.getView().getSelectionModel().select(0);
                            Ext.MessageBox.show({
                                title: 'Добавление прибора учета',
                                msg: results.msg,
                                buttons: Ext.MessageBox.OK,
                                icon: Ext.MessageBox.INFO
                            });
                        }
                    },
                    scope:this
                });

            }
        });
    },

    editEnergomerApp: function(value) {
        // in use
        //var me = this;
        //STORE
        var stUser = Ext.data.StoreManager.get("StUser");
        var stPribor = Ext.data.StoreManager.get("StEnergomer");
        //LOGIN & PASSWORD

        var values =stUser.getAt(0);
        var params = {
            login:values.get('login'),
            password:values.get('password'),
            address_id:values.get('address_id'),
            address:values.get('address'),
            house_id:values.get('house_id'),
            rowind:values.get('rowind'),
            what:"editAppEnergomer"
        };

        //GRID
        var grAppPribor = Ext.getCmp('grAppEnergomer');
        //LOGIKA

        Ext.Object.merge(value, params);
        QueryEnergomer.addEnergomer(value,function(results){

            if (results.success){
                stPribor.load({
                    params: {
                        what:'AppEnergomer',
                        address_id: value.address_id,
                        energomer_id: value.energomer_id,
                        login:value.login,
                        password:value.password
                    },
                    callback: function(records,operation,success){
                        if(success){
                            grAppPribor.getView().getSelectionModel().select(value.rowind);
                            Ext.MessageBox.show({
                                title: 'Обновление прибора учета',
                                msg: results.msg,
                                buttons: Ext.MessageBox.OK,
                                icon: Ext.MessageBox.INFO
                            });
                        }
                    },
                    scope:this
                });

            }
        });
    },

    changeEnergomerApp: function(value) {
        // in use
        var me = this;
        //STORE
        var stUser = Ext.data.StoreManager.get("StUser");
        var stPribor = Ext.data.StoreManager.get("StEnergomer");
        var stHPribor = Ext.data.StoreManager.get("StHEnergomer");//QueryVodomer.getResults <AppHVodomer>
        var StPPribora = Ext.data.StoreManager.get("StPEnergomer");//QueryVodomer.getResults  <AllPokVodomera>

        //LOGIN & PASSWORD

        var values =stUser.getAt(0);
        var params = {
            login:values.get('login'),
            password:values.get('password'),
            address_id:values.get('address_id'),
            address:values.get('address'),
            house_id:values.get('house_id'),
            what:"changeAppEnergomer"
        };

        //GRID
        var fmPribor = Ext.getCmp('fmEnergomer');
        //LOGIKA

        Ext.Object.merge(value, params);
        QueryEnergomer.addEnergomer(value,function(results){
            if (results.success==="1"){
                Ext.MessageBox.show({
                    title: 'Замена прибора учета',
                    msg: results.msg,
                    buttons: Ext.MessageBox.OK,
                    icon: Ext.MessageBox.INFO
                });
                fmPribor.getForm().reset();

                //  grAppVodomerKassa.getView().refresh();
                stPribor.load({
                    params: {
                        what:'AppEnergomer',
                        address_id: value.address_id,
                        energomer_id: value.energomer_id,
                        login:value.login,
                        password:value.password
                    },
                    scope:this
                });
                stHPribor.load({
                    params: {
                        what:'AppHEnergomer',
                        address_id: value.address_id,
                        what_id: value.address_id,
                        login:value.login,
                        password:value.password
                    },
                    scope:this
                });
                StPPribora.removeAll();

            }else {
                Ext.MessageBox.show({
                    title: 'Замена прибора учета',
                    msg: results.msg,
                    buttons: Ext.MessageBox.OK,
                    icon: Ext.MessageBox.INFO
                });
            }
        });

    }

});
